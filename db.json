{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1516517932918},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1516517932919},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1516517932916},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1516517932919},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1516517932915},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1516517932916},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1516517932919},{"_id":"themes/next/LICENSE.md","hash":"f0190c7d83a98464549a6b3a51bb206148d88e1b","modified":1516517932920},{"_id":"themes/next/bower.json","hash":"2bb9f9f74a4aa0afcaa0387994e552d6d564c5dc","modified":1516517932921},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1516517932920},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1516517932920},{"_id":"themes/next/README.md","hash":"8e49e7852fefb3b421a1cf663c1b6a2b3c61292c","modified":1516517932921},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1516517932927},{"_id":"themes/next/_config.yml","hash":"ae998678f941d2354bcb517e1ef2278758446778","modified":1517129718177},{"_id":"themes/next/package.json","hash":"16e25163e28723b64d887238bc403818b53d6aa8","modified":1516517932954},{"_id":"source/_posts/求职指南.md","hash":"25f3de691eedab8d10a1ac2269f1cd908a2c1cfb","modified":1547461086801},{"_id":"source/_posts/浅谈逻辑斯蒂回归.md","hash":"20d0a625d5d2c7f00e327e32085abf276248b697","modified":1516973879724},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1516517932895},{"_id":"themes/next/.git/config","hash":"7f8b507977a695e25b27d4c2e8aaed71410536bf","modified":1516517932902},{"_id":"themes/next/.git/index","hash":"e049e9b929b31b3411eb6fc498f03449ad61743c","modified":1516540724662},{"_id":"themes/next/.git/packed-refs","hash":"111d826ea45398a169ad9f1be66601a01a060f3f","modified":1516517932890},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e8400c762e5754baf439ab2b7c9e92acd2fc6fe9","modified":1516517932916},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1516517894441},{"_id":"source/_posts/服务器配置指南.md","hash":"b85c3942d969e5f6c650e15839cdb64039017110","modified":1526822344625},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"36201119490a04107c8179b10202548a9d0e5e60","modified":1516517932917},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c4c1d2d73714e5f9a64e42722e41675d14237236","modified":1516517932917},{"_id":"source/_posts/python文本编码.md","hash":"e4a36b1c1ba5eebbfd15386e2bd19d47f7132eab","modified":1526195305035},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1516517932922},{"_id":"themes/next/docs/INSTALLATION.md","hash":"bbec0578145441f9975950c82972125e2d89ff51","modified":1516517932923},{"_id":"themes/next/docs/MATH.md","hash":"ea2b0db46924a8d37084ad3e06d6d5129ca56585","modified":1516517932923},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1516517932924},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1516517932917},{"_id":"themes/next/languages/default.yml","hash":"2e52aa06eedfdfbb90ab0e8792968721aac412fb","modified":1516517932927},{"_id":"themes/next/languages/de.yml","hash":"b8962e3a680530c331c96b06a41a519e7eca9988","modified":1516517932927},{"_id":"themes/next/docs/LICENSE","hash":"5b702310012d480b40529fd10cf1872f687277a0","modified":1516517932923},{"_id":"themes/next/.github/stale.yml","hash":"b9f7b394c0f3c00ac36168aa5f88c04cbb335911","modified":1516517932918},{"_id":"themes/next/languages/en.yml","hash":"4e6b8699dca27936b2f784c7680f1e4fab5b4c5b","modified":1516517932928},{"_id":"themes/next/languages/fr-FR.yml","hash":"e8cf4d66e919f3c1672b8ca26827185e774c4439","modified":1516517932928},{"_id":"themes/next/languages/id.yml","hash":"d0c2f8e90b047db16491a1a5c8f288d0e7244ed3","modified":1516517932928},{"_id":"themes/next/languages/ko.yml","hash":"edf0eeebb6d713c1f7e6b9751b19e8d0b13de4ee","modified":1516517932929},{"_id":"themes/next/languages/ja.yml","hash":"640f0886603b8ed850a2ce81240a414c0cdda997","modified":1516517932929},{"_id":"themes/next/languages/pt-BR.yml","hash":"379591d355f7a1f16447635a0c154bad655db06e","modified":1516517932929},{"_id":"themes/next/languages/ru.yml","hash":"e6b7cb7a7f0528f65af473d39e57efbd5bd436d5","modified":1516517932930},{"_id":"themes/next/languages/pt.yml","hash":"ef68c52c85fa6c1aa0d53586794f8afd0d3a99ae","modified":1516517932930},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1516517932929},{"_id":"themes/next/languages/it.yml","hash":"ac109a258ba8a58d07ece728239b093e132feb82","modified":1516517932928},{"_id":"themes/next/languages/zh-TW.yml","hash":"85a434a7ed860fed58dc748cba2a857ad6878338","modified":1516517932931},{"_id":"themes/next/languages/zh-Hans.yml","hash":"68dabb015f957782e22d023a97fba94f43a010c3","modified":1516517932931},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1516517932922},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1516517932922},{"_id":"themes/next/layout/_layout.swig","hash":"88352c27ef9eecd91096b87f886ecfd296dbd413","modified":1516517932932},{"_id":"themes/next/languages/zh-HK.yml","hash":"6f01b26859d6f3fa86ae346c03f2cff86cdbdc63","modified":1516517932930},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1516517932930},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1516517932953},{"_id":"themes/next/layout/archive.swig","hash":"678a6cab739b54da9dfb2d6634848cffdc7aab6a","modified":1516517932952},{"_id":"themes/next/layout/page.swig","hash":"6f026bd43aa97a49b970cdd6032c8f905909eb91","modified":1516517932953},{"_id":"themes/next/scripts/merge-configs.js","hash":"176952dfe3605c2ab57f3f7cdbac4f2487825c41","modified":1516517932955},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1516517932955},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1516517932954},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1516517932953},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1516517933008},{"_id":"themes/next/layout/post.swig","hash":"ceba7287574c429a235aa7a62bf7a3dc1efb265a","modified":1516517932954},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1516517932954},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1516517933008},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1516517933008},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516517932988},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1516517894451},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"995e776aa6d4dbdb4e665e08683873512254100d","modified":1516517932924},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1516517932924},{"_id":"themes/next/docs/ru/README.md","hash":"349e21756bd8f55fcac1e5e5696769975db21e98","modified":1516517932925},{"_id":"themes/next/docs/zh-Hans/INSTALLATION.md","hash":"af8bee57fb6312622ed0834a95cbda719a7a7a06","modified":1516517932926},{"_id":"themes/next/docs/zh-Hans/MATH.md","hash":"ed91e86e6d7c2cce9bb6721c2b857b83a777ae6e","modified":1516517932926},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1516517932925},{"_id":"themes/next/docs/zh-Hans/README.md","hash":"11707537b4a29226a94f7ca62985a6a2ce921da2","modified":1516517932926},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1516517894442},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1516517894443},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1516517894444},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1516517894445},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1516517894446},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1516517894447},{"_id":"themes/next/.git/logs/HEAD","hash":"9f533e6d7e49f0e50a702591fce928f095455173","modified":1516517932897},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1516517894449},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1516517894449},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1516517932932},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1516517894450},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1516517894448},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1516517932932},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1516517932931},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1516517932932},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1516517932933},{"_id":"themes/next/layout/_macro/reward.swig","hash":"8dc3b6ba76c389aaa0810cbd0df206f7096d76a0","modified":1516517932933},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"616ffee93e84958e72ee0f996808f866c4ccdbf7","modified":1516517932934},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"103995422d40589489ec849731f32458983250fe","modified":1516517932934},{"_id":"themes/next/layout/_partials/footer.swig","hash":"90e5cf2cedb2657d8e8092b470fef9e6290d9828","modified":1516517932935},{"_id":"themes/next/layout/_macro/post.swig","hash":"ffcd8a98e9f619b887d649d367933df658f6d2e0","modified":1517129853745},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1516517932936},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1516517932936},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1516517932937},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1516517932940},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1516517932940},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"f8c7e729ad6e72b4c705a2c5d5041589c2b4cc52","modified":1516517932940},{"_id":"themes/next/layout/_partials/header.swig","hash":"bd7bc75b94e157e16f3578460ad02a380df31478","modified":1516517932936},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"6b7c05c797f810c1722bbbefa189ec72f8c4c3b4","modified":1516517932945},{"_id":"themes/next/docs/zh-Hans/UPDATE-FROM-5.1.X.md","hash":"0929b8f9677ef70e6f94bc9f282cb5da0a316ac1","modified":1516517932926},{"_id":"themes/next/docs/zh-Hans/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1516517932925},{"_id":"themes/next/layout/_partials/comments.swig","hash":"2e8c3df265e9ae38003d1321fb80fb3b12cb6a97","modified":1516517932934},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"debba9b7110f635204a15df148194d4c2fd2668b","modified":1516517932949},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"f134aeb8d5bee351e5277edb92ac694af314b75f","modified":1516517932942},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"ccf0035086e14dcefa24c2907301edf4c37d5448","modified":1516517932949},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1516517932948},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"1c7d77fce262065cfc321bc2e69f4d6701e4b333","modified":1516517932948},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1516517932950},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1516517932956},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1516517932956},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1516517932957},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1516517932950},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1516517932956},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1516517932957},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1516517932956},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1516517932958},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1516517932957},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1516517932958},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1516517932950},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1516517932988},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1516517932989},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1516517932989},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1516517932990},{"_id":"themes/next/source/css/main.styl","hash":"2a62e2a11e9cdcc69e538d856d6f9ce228a07c93","modified":1516517932988},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1516517932989},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1516517932988},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1516517932990},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1516517932991},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1516517932990},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1516517932991},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1516517932991},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1516517932992},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1516517932991},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1516517932991},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1516517932992},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1516517932992},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1516517932990},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1516517932992},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516517932941},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516517932941},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516517932979},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516517932979},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516517932979},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516517932987},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516517932987},{"_id":"themes/next/.git/refs/heads/master","hash":"b1835e0eba4ac4383e0e2179df9c37c5e954538b","modified":1516517932897},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1516517932937},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a4b00fd8d70be5dc94ca5d25d373eb9bd8145bab","modified":1516517932935},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1516517932938},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1516517932938},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1516517932935},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1516517932937},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1516517932939},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"0aea9f2c1b74fd611a4cd81c320b7148cfd22fe0","modified":1516517932936},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1516517932942},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1516517932941},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1516517932940},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1516517932942},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1516517932943},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1516517932943},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1516517932943},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"cfc932c5db04fef64cc56d3ba0b8ddf3a15a63bd","modified":1516517932944},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1516517932944},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1516517932942},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1516517932945},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1516517932945},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1516517932944},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1516517932938},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1516517932941},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1516517932941},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1516517932944},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1516517932945},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"a693a2c00497471d06113443f548b676ee2e527d","modified":1516517932946},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"18a58db53f1eef50462ee0065d4445b7fbb04fb5","modified":1516517932947},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"7cf0c589d95a2d1848266ffe2357e91c95d2e7f8","modified":1516517932947},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"292cdd1059b76d3d10486b71c99d9afb3e59ea44","modified":1516517932946},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"787d482d797c38e77d69629ebb88d45f972216b7","modified":1516517932946},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"8b901592f67ca616b449bb2624859f92350d6fe3","modified":1516517932948},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"ab181c036cda9656f87bb1a749e3e7cbc437f012","modified":1516517932948},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"860de4ce6fccc516d2f779a4b600a4214d8c18e2","modified":1516517932949},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1516517932947},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1516517932951},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9a865d013b6d273bbbfc3999e8657844b0c48752","modified":1516517932949},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1516517932952},{"_id":"themes/next/.git/objects/pack/pack-f69d72ccd09385943c524e62b0fb721afa104a87.idx","hash":"78d72fee360461d76cd63191f4221232eded4833","modified":1516517932786},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1516517932952},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1516517932946},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1516517932951},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1516517932979},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1516517932978},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b89e68789e6dac24e00250528f4fc9ae8aa3599b","modified":1516517932987},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1516517932986},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1516517932979},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1516517932979},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1516517932993},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1516517932993},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6c30aab4822b189d1fe9b20ca5272fd8d3ebe998","modified":1516517932993},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1516517932993},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1516517932994},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1516517932995},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1516517932994},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1516517932995},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1516517932995},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1516517932997},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1516517932997},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1516517932996},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1516517932987},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1516517932996},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1516517932996},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1516517933007},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1516517932993},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1516517933007},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1516517933007},{"_id":"themes/next/source/css/_variables/base.styl","hash":"503a39f90ae93b811b65e022943a4cf307bea227","modified":1516517932987},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1516517933003},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"9f533e6d7e49f0e50a702591fce928f095455173","modified":1516517932898},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1516517932895},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1516517932951},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1516517932951},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1516517932958},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1516517932959},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1516517932959},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1516517932959},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1516517932972},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1516517932977},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1516517932977},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1516517932964},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1516517932978},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1516517932977},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1516517932978},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1516517932977},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1516517932978},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1516517932980},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1516517932982},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1516517932982},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"3cc7646583218d16925ced7b70865e63a901d4a7","modified":1516517932983},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1516517932983},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1516517932980},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1516517932980},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1516517932959},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1516517932980},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1516517932983},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"65b23000b74b935b2a26f1b4c67d5c8514fd9d34","modified":1516517932981},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1516517932981},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1516517932984},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1516517932984},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1516517932986},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1516517932986},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1516517932986},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1516517932994},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"cc961108b12ab97d9216606ceb1cd1cd31ab20f0","modified":1516517932984},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1516517932981},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1516517932981},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1516517932998},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1516517932998},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1516517932999},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1516517933004},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1516517933004},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"9f533e6d7e49f0e50a702591fce928f095455173","modified":1516517932894},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1516517933006},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1516517933002},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1516517933002},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"66f22eb57dda1084c86c54391b6e0465e6534ea4","modified":1516517932960},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1516517932960},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1516517932961},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1516517932961},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1516517932961},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1516517932961},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1516517932963},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1516517932963},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1516517932964},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1516517932963},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1516517932964},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1516517932965},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1516517932965},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1516517932966},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1516517932966},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1516517932965},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1516517932960},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1516517932966},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"82bc7fa5d38d98e98cc25f9a73189024fda25e63","modified":1516517932967},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1516517932967},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"f1e6e6495e69c4da3e8167ffc56bfc4d17aa15e1","modified":1516517932967},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1516517932968},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1516517932968},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1516517932968},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1516517932969},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1516517932967},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1516517932969},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1516517932970},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1516517932970},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1516517932971},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"1faeb3fca899df9d033e4e6ad9a4867cdce7ef9d","modified":1516517932969},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1516517932970},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1516517932971},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1516517932968},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1516517932971},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1516517932972},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1516517932972},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1516517932972},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1516517932971},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1516517932973},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1516517932973},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1516517932973},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1516517932974},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1516517932974},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"d79c051abb8ab7b5ee5da29a28587704fd5108f5","modified":1516517932973},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1516517932975},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1516517932974},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1516517932975},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1516517932975},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1516517932975},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1516517932974},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1516517932975},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1516517932976},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1516517932976},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1516517932976},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1516517932962},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1516517932962},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"b66aa075b48429cf3875fd02f693f378aec424da","modified":1516517932976},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1516517932984},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1516517933001},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1516517932982},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1516517932962},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1516517932982},{"_id":"themes/next/.git/objects/pack/pack-f69d72ccd09385943c524e62b0fb721afa104a87.pack","hash":"c3463c36cd3a250d728fba050dbf1c889f827bee","modified":1516517932815},{"_id":"public/search.xml","hash":"6e34eddbcdf8733ea30eec009b046411a5d27a0e","modified":1547461267220},{"_id":"public/2019/01/14/求职指南/index.html","hash":"14f31b70f342f7703ff155ba9665d2b523643e2a","modified":1547461267254},{"_id":"public/2018/05/20/服务器配置指南/index.html","hash":"701b52259a59dc22482fc922f1f9024a8d56d57b","modified":1547461267254},{"_id":"public/2018/05/13/python文本编码/index.html","hash":"70a11f2eb9e4015a11ce7a03bfda7c3597eceba6","modified":1547461267255},{"_id":"public/2018/01/21/浅谈逻辑斯蒂回归/index.html","hash":"4a572d1ebf9ae8762eccfcbe43ad2e5fa6f3568d","modified":1547461267255},{"_id":"public/index.html","hash":"0e867b4ca96e7ec44c81226927147c6cc0be0327","modified":1547461267255},{"_id":"public/tags/求职/index.html","hash":"53062bd4a0ae755fb2593db30556235585cdb788","modified":1547461267255},{"_id":"public/tags/ML/index.html","hash":"5f30272cbf938732289c61aa98ed16ce519833c1","modified":1547461267256},{"_id":"public/tags/编程语言-编码/index.html","hash":"2eaf585c70b616956bb2d650a6bdae621010e8c5","modified":1547461267256},{"_id":"public/archives/index.html","hash":"f15b159ce23917eeb31f3442bc95074b90fab543","modified":1547461267256},{"_id":"public/archives/2018/index.html","hash":"b7aa13eeefcbad893bab7eb3b4e686297119bfe3","modified":1547461267256},{"_id":"public/archives/2018/01/index.html","hash":"ac77fc5e863df5a4f3f81ccdb170d26f252b0314","modified":1547461267256},{"_id":"public/archives/2018/05/index.html","hash":"3865778d44b3e6a1bbb32f6eac2b46e2251dfbf5","modified":1547461267256},{"_id":"public/archives/2019/index.html","hash":"aab977e36f0207b3c68268a7f036a407281c2b09","modified":1547461267256},{"_id":"public/archives/2019/01/index.html","hash":"983c746a403a10025d777b92585f00a4d29ca6c9","modified":1547461267256},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1547461267266},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1547461267266},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1547461267266},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1547461267266},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1547461267266},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1547461267266},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1547461267266},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1547461267266},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1547461267266},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547461267266},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547461267266},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1547461267266},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1547461267266},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1547461267266},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1547461267266},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1547461267267},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1547461267267},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1547461267267},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1547461267267},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1547461267267},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1547461268069},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1547461268071},{"_id":"public/js/src/bootstrap.js","hash":"531cdedd7fbe8cb1dab2e4328774a9f6b15b59da","modified":1547461268076},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1547461268076},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1547461268076},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1547461268076},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1547461268076},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1547461268076},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1547461268077},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1547461268077},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1547461268077},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1547461268077},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1547461268077},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1547461268077},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1547461268077},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1547461268077},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1547461268077},{"_id":"public/css/main.css","hash":"c185f80985844b6bd9004821542daf4f6ff63f79","modified":1547461268077},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1547461268077},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1547461268077},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1547461268077},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1547461268077},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1547461268077},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1547461268077},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1547461268077}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"写给20届毕业生的求职指南","date":"2019-01-14T10:16:50.881Z","_content":"\n<!-- more -->\n\n### 0.写在前面\n\n记得去年的这个时候，我还在为求职感到迷茫。这份迷茫，一部分原因是对自己能力和定位认知的不足，还有一部分原因是对即将到来的春招和秋招所知甚少。为此，也咨询了一些师兄师姐，提前获取了一些资讯。如今，经过2018年春招、实习和秋招的洗礼，再回头看，一些信息和注意点已经变得显而易见。但我相信20届毕业生，和去年的我一样，对于即将到来的求职季充满了迷茫。\n\n因此，我写这篇文章，主要是梳理一下整个求职季的环节、时间节点和注意事项等。希望能帮助20届毕业生提前窥视求职季全貌，从而在整个求职时间线上把控求职进度。\n\n### 1. 春招\n\n其实春招的面向人群是19届毕业生和20届毕业生。对于前者是招募正式员工，对于后者则是招募具备转正资格的暑期实习生。\n\n#### 1.1 时间节点\n\n其实现在互联网行业的招聘越来越提前，比如vivo一月份就开启了春招、六月份就开启了秋招。但普遍来说，大规模的春招集中在三四月份，并一直持续到六月份。从时间上来说，建议2月底左右就要开始关注春招信息和准备投递简历了。如果前期结果不理想，也不要放弃，春招会持续到六月份，机会依然很多。\n\n#### 1.2 信息渠道\n\n关于综合性渠道：前几年听师兄师姐介绍求职经验的时候，说的比较多的求职渠道还是应届生网和大街网这种求职网站，不过我身边用这些的好像很少。大家用的比较多的还是一些求职类公众号，毕竟每天用微信，公众号接收信息还是比较方便的。这里推荐一个公号【校招薪水】，是我一个学长运营的，推荐关注。对了，求职季有一些公众号会推出一些转发拉群的活动，建议别浪费时间转发了，没啥用。\n\n关于单一渠道：就是各个公司的官网和招聘公众号了，比如【腾讯招聘】、【拼多多招聘】公众号之类的。这些渠道的优点是信息推送非常及时，能让你第一时间知晓各公司开启招聘渠道的时间节点。\n\n关于抱团：就是求职者们聚在一起共享信息，互帮互助，建议大家都找到自己的小团体哦。~~无团可抱的非科班程序猿本猿只得自己拉群了~~\n\n#### 1.3 关于内推\n\n先说一下内推的流程吧，候选人找到目标公司的内推人-一般是公司正式员工或实习生，内推人将候选人的简历提交到公司简历池当中，各个部门各个组长会去简历池中筛选简历，相中某个简历后，组长将该简历锁定，然后发起面试；面试通过进入offer流程，不通过则解锁简历，可以继续被捞起面试。\n\n大部分公司都有内推渠道，但各个公司对待内推简历的态度不同。比如阿里，基本上就是上述流程，内推可以免去笔试，直达面试（当然首先要有人相中你的简历）。再比如字节跳动，内推也只是面去简历筛选而已，依然要参加笔试。\n\n内推最大的好处就是获得了一枚复活币，增加了一次投递机会。也就是说，内推失败依然可以参加正式批招聘。不过有些公司如阿里腾讯，对于每一次面试都会有记录，一次失败记录可能会影响正式批面试官的评价，所以，一定要谨慎对待内推，做好充分准备再去面试。\n\n关于内推人，尽可能选择比较熟的师兄师姐，避免选择网上公开发布的内推信息。后者一般是内部员工为了内推奖励而发布的信息，内推量巨大，很可能就遗漏了个别人的内推，而你又无法联系上他们，会白白浪费很多时间（我的血泪教训）。\n\n#### 1.4 关于暑期实习offer选择\n\n最好的当然是能去自己目标城市的目标公司，然后最好的结果是顺利转正留下！但是！相信很多人和我一样...并没有想好目标城市或者目标公司。那这个时候，个人建议选择越大的公司越好（其他因素相差不是很大的情况下）。毕竟暑期实习的最终目标是正式工作，即使不能留任，一份大公司的实习是非常为简历增色的，能够有效帮助到自己的秋招。\n\n### 2. 实习和秋招\n\n#### 2.1 暑期实习\n\n这里每个人去的公司和状态都不同，我只想说一点，就是实习秋招要兼顾。平时完成实习任务的额外时间，也要给自己留条后路，同时为秋招做准备。\n\n针对暑期实习，企业的目的是为了考察候选人，而我们的目的则是通过暑期实习留用或者为自己的简历增色从而找到更好的工作。无论你的目的是前者还是后者，都建议在尽量争取转正的同时，进行秋招的“广撒网”。注意，我这里的情况只是针对广大人民群众，不包括很牛的人（这些人也不需要看我这篇拙文.....）。\n\n如果你的目的是实习留用，并且成功地留了下来，我的看法是，依然继续参加秋招。原因有如下几点：\n\n1. 放弃秋招意味着放弃了更多机会。可能你觉得当前这个offer已经很满意了，但其实可能还有更好的机会可供选择。多试试，不要给自己留遗憾。\n\n2. 准备秋招也是巩固基础，快速进步的一段时间。毕竟，有目标，有动力，又有面试官帮助你复习和答疑，这种机会真的不多。\n\n3. 和不同公司不同职级的面试官交流，能够让你更加了解自己所在的行业以及自己所从事的方向在行业中的应用场景。虽然小编是做技术的，但我一直认为对整个行业的动向还是要有了解的。往大了说，这其实就是一个人的行业格局问题。在自己面临选择时，这种格局能够帮助自己做出更加正确的选择。\n\n如果你的目的是找到更好的工作，那就更不用说了，多去试吧！\n\n#### 2.2 时间节点\n\n都说“金9银10”，好像现在已经过时了。秋招最早在六月份就已经开始了！~~（是的，又是那个vivo）~~ 七月中旬到八月底，会有一大批提前批招聘开启。注意，提前批很重要！很重要！之前和同学讨论，有许多人后悔提前批没有多投一些，导致正式批的时候hc（head count，坑位）大大减少，许多hc都被提前批的同学给占了。所以，建议一定要重视提前批，争取在提前批能够拿下一些重量级offer，这样秋招会轻松很多。\n\n#### 2.3 信息渠道和内推\n\n见1.2和1.3\n\n#### 2.4 薪资谈判\n\n写到这里，悲催的发现我好像从来没有谈判过薪资。~~突然有点后悔(〒︿〒)~~。 不过没吃过猪肉，还是见过很多猪跑的。所谓薪资谈判，就是比如你有阿里和腾讯的offer，可以拿着阿里的offer去和腾讯说我要加薪（当然过程可能没这么简单粗暴）。\n\n建议谈薪适度即可。见过一个骚操作，有人拿阿里offer和腾讯谈薪，然后又拿腾讯谈完的薪资去和阿里谈薪.（类似于左脚踩右脚，右脚踩左脚然后想上天？）.....不知道那位仁兄怎样了。\n\n还见过一个公司，就不提名字了，为了挽留候选人-我们群里的一位同学，慢慢一步步加薪，最后相比原offer加了6k（月薪）。虽然最后薪资非常可观，但我们都认为这家公司去不得。后面进行大幅度加薪，说明原本给的薪资是压价非常严重的，而且是一步步慢慢加薪，说明这家公司格局太小，去不得。\n\n#### 2.5 offer选择\n\n正式offer选择不同于实习offer选择，要考虑的因素太多。可以参考我之前的offer选择文章。","source":"_posts/求职指南.md","raw":"\n---\ntitle: 写给20届毕业生的求职指南\ndate: \ntags: 求职\n---\n\n<!-- more -->\n\n### 0.写在前面\n\n记得去年的这个时候，我还在为求职感到迷茫。这份迷茫，一部分原因是对自己能力和定位认知的不足，还有一部分原因是对即将到来的春招和秋招所知甚少。为此，也咨询了一些师兄师姐，提前获取了一些资讯。如今，经过2018年春招、实习和秋招的洗礼，再回头看，一些信息和注意点已经变得显而易见。但我相信20届毕业生，和去年的我一样，对于即将到来的求职季充满了迷茫。\n\n因此，我写这篇文章，主要是梳理一下整个求职季的环节、时间节点和注意事项等。希望能帮助20届毕业生提前窥视求职季全貌，从而在整个求职时间线上把控求职进度。\n\n### 1. 春招\n\n其实春招的面向人群是19届毕业生和20届毕业生。对于前者是招募正式员工，对于后者则是招募具备转正资格的暑期实习生。\n\n#### 1.1 时间节点\n\n其实现在互联网行业的招聘越来越提前，比如vivo一月份就开启了春招、六月份就开启了秋招。但普遍来说，大规模的春招集中在三四月份，并一直持续到六月份。从时间上来说，建议2月底左右就要开始关注春招信息和准备投递简历了。如果前期结果不理想，也不要放弃，春招会持续到六月份，机会依然很多。\n\n#### 1.2 信息渠道\n\n关于综合性渠道：前几年听师兄师姐介绍求职经验的时候，说的比较多的求职渠道还是应届生网和大街网这种求职网站，不过我身边用这些的好像很少。大家用的比较多的还是一些求职类公众号，毕竟每天用微信，公众号接收信息还是比较方便的。这里推荐一个公号【校招薪水】，是我一个学长运营的，推荐关注。对了，求职季有一些公众号会推出一些转发拉群的活动，建议别浪费时间转发了，没啥用。\n\n关于单一渠道：就是各个公司的官网和招聘公众号了，比如【腾讯招聘】、【拼多多招聘】公众号之类的。这些渠道的优点是信息推送非常及时，能让你第一时间知晓各公司开启招聘渠道的时间节点。\n\n关于抱团：就是求职者们聚在一起共享信息，互帮互助，建议大家都找到自己的小团体哦。~~无团可抱的非科班程序猿本猿只得自己拉群了~~\n\n#### 1.3 关于内推\n\n先说一下内推的流程吧，候选人找到目标公司的内推人-一般是公司正式员工或实习生，内推人将候选人的简历提交到公司简历池当中，各个部门各个组长会去简历池中筛选简历，相中某个简历后，组长将该简历锁定，然后发起面试；面试通过进入offer流程，不通过则解锁简历，可以继续被捞起面试。\n\n大部分公司都有内推渠道，但各个公司对待内推简历的态度不同。比如阿里，基本上就是上述流程，内推可以免去笔试，直达面试（当然首先要有人相中你的简历）。再比如字节跳动，内推也只是面去简历筛选而已，依然要参加笔试。\n\n内推最大的好处就是获得了一枚复活币，增加了一次投递机会。也就是说，内推失败依然可以参加正式批招聘。不过有些公司如阿里腾讯，对于每一次面试都会有记录，一次失败记录可能会影响正式批面试官的评价，所以，一定要谨慎对待内推，做好充分准备再去面试。\n\n关于内推人，尽可能选择比较熟的师兄师姐，避免选择网上公开发布的内推信息。后者一般是内部员工为了内推奖励而发布的信息，内推量巨大，很可能就遗漏了个别人的内推，而你又无法联系上他们，会白白浪费很多时间（我的血泪教训）。\n\n#### 1.4 关于暑期实习offer选择\n\n最好的当然是能去自己目标城市的目标公司，然后最好的结果是顺利转正留下！但是！相信很多人和我一样...并没有想好目标城市或者目标公司。那这个时候，个人建议选择越大的公司越好（其他因素相差不是很大的情况下）。毕竟暑期实习的最终目标是正式工作，即使不能留任，一份大公司的实习是非常为简历增色的，能够有效帮助到自己的秋招。\n\n### 2. 实习和秋招\n\n#### 2.1 暑期实习\n\n这里每个人去的公司和状态都不同，我只想说一点，就是实习秋招要兼顾。平时完成实习任务的额外时间，也要给自己留条后路，同时为秋招做准备。\n\n针对暑期实习，企业的目的是为了考察候选人，而我们的目的则是通过暑期实习留用或者为自己的简历增色从而找到更好的工作。无论你的目的是前者还是后者，都建议在尽量争取转正的同时，进行秋招的“广撒网”。注意，我这里的情况只是针对广大人民群众，不包括很牛的人（这些人也不需要看我这篇拙文.....）。\n\n如果你的目的是实习留用，并且成功地留了下来，我的看法是，依然继续参加秋招。原因有如下几点：\n\n1. 放弃秋招意味着放弃了更多机会。可能你觉得当前这个offer已经很满意了，但其实可能还有更好的机会可供选择。多试试，不要给自己留遗憾。\n\n2. 准备秋招也是巩固基础，快速进步的一段时间。毕竟，有目标，有动力，又有面试官帮助你复习和答疑，这种机会真的不多。\n\n3. 和不同公司不同职级的面试官交流，能够让你更加了解自己所在的行业以及自己所从事的方向在行业中的应用场景。虽然小编是做技术的，但我一直认为对整个行业的动向还是要有了解的。往大了说，这其实就是一个人的行业格局问题。在自己面临选择时，这种格局能够帮助自己做出更加正确的选择。\n\n如果你的目的是找到更好的工作，那就更不用说了，多去试吧！\n\n#### 2.2 时间节点\n\n都说“金9银10”，好像现在已经过时了。秋招最早在六月份就已经开始了！~~（是的，又是那个vivo）~~ 七月中旬到八月底，会有一大批提前批招聘开启。注意，提前批很重要！很重要！之前和同学讨论，有许多人后悔提前批没有多投一些，导致正式批的时候hc（head count，坑位）大大减少，许多hc都被提前批的同学给占了。所以，建议一定要重视提前批，争取在提前批能够拿下一些重量级offer，这样秋招会轻松很多。\n\n#### 2.3 信息渠道和内推\n\n见1.2和1.3\n\n#### 2.4 薪资谈判\n\n写到这里，悲催的发现我好像从来没有谈判过薪资。~~突然有点后悔(〒︿〒)~~。 不过没吃过猪肉，还是见过很多猪跑的。所谓薪资谈判，就是比如你有阿里和腾讯的offer，可以拿着阿里的offer去和腾讯说我要加薪（当然过程可能没这么简单粗暴）。\n\n建议谈薪适度即可。见过一个骚操作，有人拿阿里offer和腾讯谈薪，然后又拿腾讯谈完的薪资去和阿里谈薪.（类似于左脚踩右脚，右脚踩左脚然后想上天？）.....不知道那位仁兄怎样了。\n\n还见过一个公司，就不提名字了，为了挽留候选人-我们群里的一位同学，慢慢一步步加薪，最后相比原offer加了6k（月薪）。虽然最后薪资非常可观，但我们都认为这家公司去不得。后面进行大幅度加薪，说明原本给的薪资是压价非常严重的，而且是一步步慢慢加薪，说明这家公司格局太小，去不得。\n\n#### 2.5 offer选择\n\n正式offer选择不同于实习offer选择，要考虑的因素太多。可以参考我之前的offer选择文章。","slug":"求职指南","published":1,"updated":"2019-01-14T10:18:06.801Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqw6heif0000gsujh5s8to23","content":"<a id=\"more\"></a>\n<h3 id=\"0-写在前面\"><a href=\"#0-写在前面\" class=\"headerlink\" title=\"0.写在前面\"></a>0.写在前面</h3><p>记得去年的这个时候，我还在为求职感到迷茫。这份迷茫，一部分原因是对自己能力和定位认知的不足，还有一部分原因是对即将到来的春招和秋招所知甚少。为此，也咨询了一些师兄师姐，提前获取了一些资讯。如今，经过2018年春招、实习和秋招的洗礼，再回头看，一些信息和注意点已经变得显而易见。但我相信20届毕业生，和去年的我一样，对于即将到来的求职季充满了迷茫。</p>\n<p>因此，我写这篇文章，主要是梳理一下整个求职季的环节、时间节点和注意事项等。希望能帮助20届毕业生提前窥视求职季全貌，从而在整个求职时间线上把控求职进度。</p>\n<h3 id=\"1-春招\"><a href=\"#1-春招\" class=\"headerlink\" title=\"1. 春招\"></a>1. 春招</h3><p>其实春招的面向人群是19届毕业生和20届毕业生。对于前者是招募正式员工，对于后者则是招募具备转正资格的暑期实习生。</p>\n<h4 id=\"1-1-时间节点\"><a href=\"#1-1-时间节点\" class=\"headerlink\" title=\"1.1 时间节点\"></a>1.1 时间节点</h4><p>其实现在互联网行业的招聘越来越提前，比如vivo一月份就开启了春招、六月份就开启了秋招。但普遍来说，大规模的春招集中在三四月份，并一直持续到六月份。从时间上来说，建议2月底左右就要开始关注春招信息和准备投递简历了。如果前期结果不理想，也不要放弃，春招会持续到六月份，机会依然很多。</p>\n<h4 id=\"1-2-信息渠道\"><a href=\"#1-2-信息渠道\" class=\"headerlink\" title=\"1.2 信息渠道\"></a>1.2 信息渠道</h4><p>关于综合性渠道：前几年听师兄师姐介绍求职经验的时候，说的比较多的求职渠道还是应届生网和大街网这种求职网站，不过我身边用这些的好像很少。大家用的比较多的还是一些求职类公众号，毕竟每天用微信，公众号接收信息还是比较方便的。这里推荐一个公号【校招薪水】，是我一个学长运营的，推荐关注。对了，求职季有一些公众号会推出一些转发拉群的活动，建议别浪费时间转发了，没啥用。</p>\n<p>关于单一渠道：就是各个公司的官网和招聘公众号了，比如【腾讯招聘】、【拼多多招聘】公众号之类的。这些渠道的优点是信息推送非常及时，能让你第一时间知晓各公司开启招聘渠道的时间节点。</p>\n<p>关于抱团：就是求职者们聚在一起共享信息，互帮互助，建议大家都找到自己的小团体哦。<del>无团可抱的非科班程序猿本猿只得自己拉群了</del></p>\n<h4 id=\"1-3-关于内推\"><a href=\"#1-3-关于内推\" class=\"headerlink\" title=\"1.3 关于内推\"></a>1.3 关于内推</h4><p>先说一下内推的流程吧，候选人找到目标公司的内推人-一般是公司正式员工或实习生，内推人将候选人的简历提交到公司简历池当中，各个部门各个组长会去简历池中筛选简历，相中某个简历后，组长将该简历锁定，然后发起面试；面试通过进入offer流程，不通过则解锁简历，可以继续被捞起面试。</p>\n<p>大部分公司都有内推渠道，但各个公司对待内推简历的态度不同。比如阿里，基本上就是上述流程，内推可以免去笔试，直达面试（当然首先要有人相中你的简历）。再比如字节跳动，内推也只是面去简历筛选而已，依然要参加笔试。</p>\n<p>内推最大的好处就是获得了一枚复活币，增加了一次投递机会。也就是说，内推失败依然可以参加正式批招聘。不过有些公司如阿里腾讯，对于每一次面试都会有记录，一次失败记录可能会影响正式批面试官的评价，所以，一定要谨慎对待内推，做好充分准备再去面试。</p>\n<p>关于内推人，尽可能选择比较熟的师兄师姐，避免选择网上公开发布的内推信息。后者一般是内部员工为了内推奖励而发布的信息，内推量巨大，很可能就遗漏了个别人的内推，而你又无法联系上他们，会白白浪费很多时间（我的血泪教训）。</p>\n<h4 id=\"1-4-关于暑期实习offer选择\"><a href=\"#1-4-关于暑期实习offer选择\" class=\"headerlink\" title=\"1.4 关于暑期实习offer选择\"></a>1.4 关于暑期实习offer选择</h4><p>最好的当然是能去自己目标城市的目标公司，然后最好的结果是顺利转正留下！但是！相信很多人和我一样…并没有想好目标城市或者目标公司。那这个时候，个人建议选择越大的公司越好（其他因素相差不是很大的情况下）。毕竟暑期实习的最终目标是正式工作，即使不能留任，一份大公司的实习是非常为简历增色的，能够有效帮助到自己的秋招。</p>\n<h3 id=\"2-实习和秋招\"><a href=\"#2-实习和秋招\" class=\"headerlink\" title=\"2. 实习和秋招\"></a>2. 实习和秋招</h3><h4 id=\"2-1-暑期实习\"><a href=\"#2-1-暑期实习\" class=\"headerlink\" title=\"2.1 暑期实习\"></a>2.1 暑期实习</h4><p>这里每个人去的公司和状态都不同，我只想说一点，就是实习秋招要兼顾。平时完成实习任务的额外时间，也要给自己留条后路，同时为秋招做准备。</p>\n<p>针对暑期实习，企业的目的是为了考察候选人，而我们的目的则是通过暑期实习留用或者为自己的简历增色从而找到更好的工作。无论你的目的是前者还是后者，都建议在尽量争取转正的同时，进行秋招的“广撒网”。注意，我这里的情况只是针对广大人民群众，不包括很牛的人（这些人也不需要看我这篇拙文…..）。</p>\n<p>如果你的目的是实习留用，并且成功地留了下来，我的看法是，依然继续参加秋招。原因有如下几点：</p>\n<ol>\n<li><p>放弃秋招意味着放弃了更多机会。可能你觉得当前这个offer已经很满意了，但其实可能还有更好的机会可供选择。多试试，不要给自己留遗憾。</p>\n</li>\n<li><p>准备秋招也是巩固基础，快速进步的一段时间。毕竟，有目标，有动力，又有面试官帮助你复习和答疑，这种机会真的不多。</p>\n</li>\n<li><p>和不同公司不同职级的面试官交流，能够让你更加了解自己所在的行业以及自己所从事的方向在行业中的应用场景。虽然小编是做技术的，但我一直认为对整个行业的动向还是要有了解的。往大了说，这其实就是一个人的行业格局问题。在自己面临选择时，这种格局能够帮助自己做出更加正确的选择。</p>\n</li>\n</ol>\n<p>如果你的目的是找到更好的工作，那就更不用说了，多去试吧！</p>\n<h4 id=\"2-2-时间节点\"><a href=\"#2-2-时间节点\" class=\"headerlink\" title=\"2.2 时间节点\"></a>2.2 时间节点</h4><p>都说“金9银10”，好像现在已经过时了。秋招最早在六月份就已经开始了！<del>（是的，又是那个vivo）</del> 七月中旬到八月底，会有一大批提前批招聘开启。注意，提前批很重要！很重要！之前和同学讨论，有许多人后悔提前批没有多投一些，导致正式批的时候hc（head count，坑位）大大减少，许多hc都被提前批的同学给占了。所以，建议一定要重视提前批，争取在提前批能够拿下一些重量级offer，这样秋招会轻松很多。</p>\n<h4 id=\"2-3-信息渠道和内推\"><a href=\"#2-3-信息渠道和内推\" class=\"headerlink\" title=\"2.3 信息渠道和内推\"></a>2.3 信息渠道和内推</h4><p>见1.2和1.3</p>\n<h4 id=\"2-4-薪资谈判\"><a href=\"#2-4-薪资谈判\" class=\"headerlink\" title=\"2.4 薪资谈判\"></a>2.4 薪资谈判</h4><p>写到这里，悲催的发现我好像从来没有谈判过薪资。<del>突然有点后悔(〒︿〒)</del>。 不过没吃过猪肉，还是见过很多猪跑的。所谓薪资谈判，就是比如你有阿里和腾讯的offer，可以拿着阿里的offer去和腾讯说我要加薪（当然过程可能没这么简单粗暴）。</p>\n<p>建议谈薪适度即可。见过一个骚操作，有人拿阿里offer和腾讯谈薪，然后又拿腾讯谈完的薪资去和阿里谈薪.（类似于左脚踩右脚，右脚踩左脚然后想上天？）…..不知道那位仁兄怎样了。</p>\n<p>还见过一个公司，就不提名字了，为了挽留候选人-我们群里的一位同学，慢慢一步步加薪，最后相比原offer加了6k（月薪）。虽然最后薪资非常可观，但我们都认为这家公司去不得。后面进行大幅度加薪，说明原本给的薪资是压价非常严重的，而且是一步步慢慢加薪，说明这家公司格局太小，去不得。</p>\n<h4 id=\"2-5-offer选择\"><a href=\"#2-5-offer选择\" class=\"headerlink\" title=\"2.5 offer选择\"></a>2.5 offer选择</h4><p>正式offer选择不同于实习offer选择，要考虑的因素太多。可以参考我之前的offer选择文章。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"0-写在前面\"><a href=\"#0-写在前面\" class=\"headerlink\" title=\"0.写在前面\"></a>0.写在前面</h3><p>记得去年的这个时候，我还在为求职感到迷茫。这份迷茫，一部分原因是对自己能力和定位认知的不足，还有一部分原因是对即将到来的春招和秋招所知甚少。为此，也咨询了一些师兄师姐，提前获取了一些资讯。如今，经过2018年春招、实习和秋招的洗礼，再回头看，一些信息和注意点已经变得显而易见。但我相信20届毕业生，和去年的我一样，对于即将到来的求职季充满了迷茫。</p>\n<p>因此，我写这篇文章，主要是梳理一下整个求职季的环节、时间节点和注意事项等。希望能帮助20届毕业生提前窥视求职季全貌，从而在整个求职时间线上把控求职进度。</p>\n<h3 id=\"1-春招\"><a href=\"#1-春招\" class=\"headerlink\" title=\"1. 春招\"></a>1. 春招</h3><p>其实春招的面向人群是19届毕业生和20届毕业生。对于前者是招募正式员工，对于后者则是招募具备转正资格的暑期实习生。</p>\n<h4 id=\"1-1-时间节点\"><a href=\"#1-1-时间节点\" class=\"headerlink\" title=\"1.1 时间节点\"></a>1.1 时间节点</h4><p>其实现在互联网行业的招聘越来越提前，比如vivo一月份就开启了春招、六月份就开启了秋招。但普遍来说，大规模的春招集中在三四月份，并一直持续到六月份。从时间上来说，建议2月底左右就要开始关注春招信息和准备投递简历了。如果前期结果不理想，也不要放弃，春招会持续到六月份，机会依然很多。</p>\n<h4 id=\"1-2-信息渠道\"><a href=\"#1-2-信息渠道\" class=\"headerlink\" title=\"1.2 信息渠道\"></a>1.2 信息渠道</h4><p>关于综合性渠道：前几年听师兄师姐介绍求职经验的时候，说的比较多的求职渠道还是应届生网和大街网这种求职网站，不过我身边用这些的好像很少。大家用的比较多的还是一些求职类公众号，毕竟每天用微信，公众号接收信息还是比较方便的。这里推荐一个公号【校招薪水】，是我一个学长运营的，推荐关注。对了，求职季有一些公众号会推出一些转发拉群的活动，建议别浪费时间转发了，没啥用。</p>\n<p>关于单一渠道：就是各个公司的官网和招聘公众号了，比如【腾讯招聘】、【拼多多招聘】公众号之类的。这些渠道的优点是信息推送非常及时，能让你第一时间知晓各公司开启招聘渠道的时间节点。</p>\n<p>关于抱团：就是求职者们聚在一起共享信息，互帮互助，建议大家都找到自己的小团体哦。<del>无团可抱的非科班程序猿本猿只得自己拉群了</del></p>\n<h4 id=\"1-3-关于内推\"><a href=\"#1-3-关于内推\" class=\"headerlink\" title=\"1.3 关于内推\"></a>1.3 关于内推</h4><p>先说一下内推的流程吧，候选人找到目标公司的内推人-一般是公司正式员工或实习生，内推人将候选人的简历提交到公司简历池当中，各个部门各个组长会去简历池中筛选简历，相中某个简历后，组长将该简历锁定，然后发起面试；面试通过进入offer流程，不通过则解锁简历，可以继续被捞起面试。</p>\n<p>大部分公司都有内推渠道，但各个公司对待内推简历的态度不同。比如阿里，基本上就是上述流程，内推可以免去笔试，直达面试（当然首先要有人相中你的简历）。再比如字节跳动，内推也只是面去简历筛选而已，依然要参加笔试。</p>\n<p>内推最大的好处就是获得了一枚复活币，增加了一次投递机会。也就是说，内推失败依然可以参加正式批招聘。不过有些公司如阿里腾讯，对于每一次面试都会有记录，一次失败记录可能会影响正式批面试官的评价，所以，一定要谨慎对待内推，做好充分准备再去面试。</p>\n<p>关于内推人，尽可能选择比较熟的师兄师姐，避免选择网上公开发布的内推信息。后者一般是内部员工为了内推奖励而发布的信息，内推量巨大，很可能就遗漏了个别人的内推，而你又无法联系上他们，会白白浪费很多时间（我的血泪教训）。</p>\n<h4 id=\"1-4-关于暑期实习offer选择\"><a href=\"#1-4-关于暑期实习offer选择\" class=\"headerlink\" title=\"1.4 关于暑期实习offer选择\"></a>1.4 关于暑期实习offer选择</h4><p>最好的当然是能去自己目标城市的目标公司，然后最好的结果是顺利转正留下！但是！相信很多人和我一样…并没有想好目标城市或者目标公司。那这个时候，个人建议选择越大的公司越好（其他因素相差不是很大的情况下）。毕竟暑期实习的最终目标是正式工作，即使不能留任，一份大公司的实习是非常为简历增色的，能够有效帮助到自己的秋招。</p>\n<h3 id=\"2-实习和秋招\"><a href=\"#2-实习和秋招\" class=\"headerlink\" title=\"2. 实习和秋招\"></a>2. 实习和秋招</h3><h4 id=\"2-1-暑期实习\"><a href=\"#2-1-暑期实习\" class=\"headerlink\" title=\"2.1 暑期实习\"></a>2.1 暑期实习</h4><p>这里每个人去的公司和状态都不同，我只想说一点，就是实习秋招要兼顾。平时完成实习任务的额外时间，也要给自己留条后路，同时为秋招做准备。</p>\n<p>针对暑期实习，企业的目的是为了考察候选人，而我们的目的则是通过暑期实习留用或者为自己的简历增色从而找到更好的工作。无论你的目的是前者还是后者，都建议在尽量争取转正的同时，进行秋招的“广撒网”。注意，我这里的情况只是针对广大人民群众，不包括很牛的人（这些人也不需要看我这篇拙文…..）。</p>\n<p>如果你的目的是实习留用，并且成功地留了下来，我的看法是，依然继续参加秋招。原因有如下几点：</p>\n<ol>\n<li><p>放弃秋招意味着放弃了更多机会。可能你觉得当前这个offer已经很满意了，但其实可能还有更好的机会可供选择。多试试，不要给自己留遗憾。</p>\n</li>\n<li><p>准备秋招也是巩固基础，快速进步的一段时间。毕竟，有目标，有动力，又有面试官帮助你复习和答疑，这种机会真的不多。</p>\n</li>\n<li><p>和不同公司不同职级的面试官交流，能够让你更加了解自己所在的行业以及自己所从事的方向在行业中的应用场景。虽然小编是做技术的，但我一直认为对整个行业的动向还是要有了解的。往大了说，这其实就是一个人的行业格局问题。在自己面临选择时，这种格局能够帮助自己做出更加正确的选择。</p>\n</li>\n</ol>\n<p>如果你的目的是找到更好的工作，那就更不用说了，多去试吧！</p>\n<h4 id=\"2-2-时间节点\"><a href=\"#2-2-时间节点\" class=\"headerlink\" title=\"2.2 时间节点\"></a>2.2 时间节点</h4><p>都说“金9银10”，好像现在已经过时了。秋招最早在六月份就已经开始了！<del>（是的，又是那个vivo）</del> 七月中旬到八月底，会有一大批提前批招聘开启。注意，提前批很重要！很重要！之前和同学讨论，有许多人后悔提前批没有多投一些，导致正式批的时候hc（head count，坑位）大大减少，许多hc都被提前批的同学给占了。所以，建议一定要重视提前批，争取在提前批能够拿下一些重量级offer，这样秋招会轻松很多。</p>\n<h4 id=\"2-3-信息渠道和内推\"><a href=\"#2-3-信息渠道和内推\" class=\"headerlink\" title=\"2.3 信息渠道和内推\"></a>2.3 信息渠道和内推</h4><p>见1.2和1.3</p>\n<h4 id=\"2-4-薪资谈判\"><a href=\"#2-4-薪资谈判\" class=\"headerlink\" title=\"2.4 薪资谈判\"></a>2.4 薪资谈判</h4><p>写到这里，悲催的发现我好像从来没有谈判过薪资。<del>突然有点后悔(〒︿〒)</del>。 不过没吃过猪肉，还是见过很多猪跑的。所谓薪资谈判，就是比如你有阿里和腾讯的offer，可以拿着阿里的offer去和腾讯说我要加薪（当然过程可能没这么简单粗暴）。</p>\n<p>建议谈薪适度即可。见过一个骚操作，有人拿阿里offer和腾讯谈薪，然后又拿腾讯谈完的薪资去和阿里谈薪.（类似于左脚踩右脚，右脚踩左脚然后想上天？）…..不知道那位仁兄怎样了。</p>\n<p>还见过一个公司，就不提名字了，为了挽留候选人-我们群里的一位同学，慢慢一步步加薪，最后相比原offer加了6k（月薪）。虽然最后薪资非常可观，但我们都认为这家公司去不得。后面进行大幅度加薪，说明原本给的薪资是压价非常严重的，而且是一步步慢慢加薪，说明这家公司格局太小，去不得。</p>\n<h4 id=\"2-5-offer选择\"><a href=\"#2-5-offer选择\" class=\"headerlink\" title=\"2.5 offer选择\"></a>2.5 offer选择</h4><p>正式offer选择不同于实习offer选择，要考虑的因素太多。可以参考我之前的offer选择文章。</p>"},{"title":"机器学习算法系列（1）- 逻辑斯蒂回归","date":"2018-01-21T07:15:46.000Z","_content":"\n<!-- more -->\n\n> 转载请注明出处：\n> https://zhuyuhe.github.io/2018/01/21/%E6%B5%85%E8%B0%88%E9%80%BB%E8%BE%91%E6%96%AF%E8%92%82%E5%9B%9E%E5%BD%92/\n\n博主即将开始求职之旅，于是搭了这个博客，将备战春招和秋招的复习笔记记录于此。\n此系列是对机器学习算法理论的复习，力求搞懂算法的来龙去脉，公式繁多，废话较少。\n以后有时间会在此基础上进行完善，力求通俗易懂。\n如有不足之处，还请各位读者指正！\n\n## 1.从广义线性模型到sigmoid函数\n首先，LR是二分类模型，我们假设二分类问题服从伯努利分布。即其概率分布为：\n$$P(y;\\phi)= \\phi^y (1-\\phi)^{1-y} = exp(ylog\\phi + (1-y)log(1-\\phi))=exp(ylog\\frac{\\phi}{1-\\phi} + log(1-\\phi))$$\n而伯努利分布属于指数蔟分布，即其概率分布可以写成如下形式：\n$$P(y;\\eta)= b(y)exp(\\eta^TT(y)-\\alpha(\\eta))$$\n其中，$\\eta$为自然参数。\n广义线性模型认为输入x与自然参数$\\eta$为线性关系，即$\\eta = \\theta^TX$。\n对比上述两式可以得到：\n$$b(y)  =  1$$ \n$$T(y) =  y $$\n$$\\eta  =  log\\frac{\\phi}{1-\\phi} $$\n\n\n所以有\n$$\\theta^TX = \\eta = log\\frac{\\phi}{1-\\phi}$$\n\n得到\n$$\\phi = \\frac{1}{1+e ^ {-\\theta^TX}}$$\n\n这里的$\\phi$就是伯努利分布中的P(Y=1|X)\n而LR中的模型输出\n$$h(x) = E(y|x) = 0 · P(Y=0|X) + 1 · P(Y=1|X) = \\frac{1}{1+e ^ {-\\theta^TX}}$$\n\n\n\n这就推导出了逻辑斯蒂回归模型。也解释了为什么LR要用sigmoid函数，因为我们从广义线性模型出发，推导出的LR模型刚好就是sigmoid函数形式的。\n并且sigmoid有很多良好的数学性质：\n\n - 连续可导\n - 值域为（0,1）,给了模型可解释性，即将输出结果解释为对应于该分类的概率\n \n \n下一节我们将从推导出的lr模型出发，去看看它的损失函数是怎么来的。\n\n## 2. 从极大似然估计到损失函数\n给定一组数据，我们需要用这组数据去找到最好的参数$\\theta$。\n我们认为使观测结果（即现有的数据）出现的概率最大的参数$\\theta$就是最优的参数。\n这种思想就是极大似然估计。\n假设这组数据独立同分布，其联合概率可以写成各样本出现概率的乘积。即\n\n\n$$L(\\theta) = \\prod_{i=1} ^ m P_i = \\prod_{i=1} ^ m {P(y ^ {(i)}=1 | X ^ {(i)})}^{y ^ {(i)}}{P(y ^ {(i)}=0 | X ^ {(i)})} ^ {1-y ^ {(i)}}$$\n\n\n\n以上函数称为似然函数。\n我们的目标便是最大化似然函数，即找到使联合概率（也就是似然函数）最大的参数$\\theta$。\n为了方便求解，对似然函数取对数，得到对数似然函数：\n\n\n$$log L(\\theta) = \\sum_{i=1} ^ m y ^ {(i)}log \\frac{1}{1+e ^ {-\\theta ^ TX}} + (1-y ^ {(i)})log \\frac{1}{1+e ^ {\\theta ^ TX}}$$\n\n\n对对数似然函数取负号，求平均，就得到了LR模型的损失函数：\n\n\n$$J(\\theta) = -\\frac{1}{m}\\sum_{i=1}^m (y ^ {(i)}log \\frac{1}{1+e ^ {-\\theta^TX}} + (1-y^{(i)})log \\frac{1}{1+e ^ {\\theta^TX}})$$\n\n\n现在我们的目标就就很明确了：\n优化$J(\\theta)$，找出使$J(\\theta)$最小的参数$\\theta$，就是我们认为的最优的$\\theta$。\n\n## 3. 梯度下降法\n梯度下降法是常用的优化算法之一。\n针对LR，梯度下降法的过程如下：\n首先，有\n$$J(\\theta) = -\\frac{1}{m}\\sum_{i=1}^m (y ^ {(i)}log h(x^{(i)}) + (1-y^{(i)})log (1-h(x^{(i)}))$$\n其中$h(x)  = \\frac{1}{1+e ^ {-\\theta^TX}}$\n接下来求损失函数$J(\\theta)$对参数$\\theta$的梯度：\n$$\\frac{\\partial J(\\theta)}{\\partial \\theta} = - \\frac{1}{m}\\sum_{i=1}^m[\\frac{y ^ {(i)}}{h(x^{(i)})}·\\frac{\\partial h(x^{(i)})}{\\partial \\theta} - \\frac{1- y ^ {(i)}}{1 - h(x^{(i)})}·\\frac{\\partial h(x^{(i)})}{\\partial \\theta}] = -\\frac{1}{m} \\sum_{i=1}^m\\frac{\\partial h(x^{(i)})}{\\partial \\theta}·\\frac{y^{(i)} - h(x^{(i)})}{ h(x^{(i)})(1 - h(x^{(i)}))}$$\n将h(x)带入上式：\n$$\\frac{\\partial J(\\theta)}{\\partial \\theta} = \\frac{1}{m}\\sum_{i=1}^m( h(x^{(i)}) - y^{(i)})·x ^ {(i)}$$\n得到迭代公式：\n$$\\theta := \\theta - \\alpha\\frac{1}{m}\\sum_{i=1}^m( h(x^{(i)}) - y^{(i)})·x ^ {(i)}$$\n$\\alpha$和$\\frac{1}{m}$为常数，因此将其合并，得到：\n$$\\theta := \\theta - \\alpha\\sum_{i=1}^m( h(x^{(i)}) - y^{(i)})·x ^ {(i)}$$\n$\\alpha$称为learning rate。\n注意，公式中的变量均为向量形式。\n至此，我们得到了参数$\\theta$的迭代公式，不断迭代直到收敛或损失函数变化很小，我们就得到了最优参数$\\theta$\n## 4. 正则化\n\n### 4.1 假设空间与奥卡姆剃刀原理\n给定我们一组数据，我们认为这组数据为观测结果。符合这组观测结果的假设有很多。\n我们可以把学习过程看做在所有假设组成的空间中进行搜索的过程。\n在这个搜索过程中，我们可能会找到许多满足这组观测数据的假设。\n比如，坐标系下两点，我们可以用直线拟合，也可以用二次曲线拟合等等。\n当出现两个模型均很好地符合当前数据时，我们有一个选择模型的指导原则：\n\n> 奥卡姆剃刀原理：这是一种常用的、自然科学研究中最基本的原则，即“若有多个假设与观察一致，则选最简单的那个”\n\n因此，我们需要在模型的学习过程中，加入这个指导原则。\n这个过程，就叫正则化。又叫结构风险最小化。\n\n### 4.2 L0/L1/L2正则化\n\n一般，我们认为，参数越少，模型越简单。\n理想情况下，我们可以在损失函数中加入（不为0的）参数个数来惩罚模型复杂度。\n即\n$$J(\\theta) = -\\frac{1}{m}\\sum_{i=1}^m (y ^ {(i)}log h(x^{(i)}) + (1-y^{(i)})log (1-h(x^{(i)})) + \\lambda\\sum_{i=1}^V1（\\theta_i）$$\n其中，V为参数数量，并且\n$$\\begin{equation}\n1(x) = \\begin{cases}\n0, & \\text{if x = 0}\\newline\n1, & \\text{if x != 0}\n\\end{cases}\n\\end{equation}$$\n这种方法叫做L0正则化。\n但实际中并不会使用L0正则化，因为很难求解。\n因此实际中往往使用L1或L2正则化来替代L0正则化。\nL1正则化为：\n$$\\lambda||\\theta||_1 = \\lambda \\sum _{i=1}^V|\\theta|$$\nL2正则化为：\n$$\\lambda||\\theta||_2 = \\lambda \\sqrt{\\sum _ {i=1}^V \\theta_i ^ 2}$$\nL1正则化和L2正则化都对参数的大小进行了惩罚。这里先说明一个问题：\n\n> 为什么认为参数越小模型复杂度也越小呢？\n> 因为越复杂的模型，越是尝试对所有样本进行拟合，包括一些异常点。\n> 这会导致模型在较小的输入区间内，产生较大的输出波动。\n> 较大的波动代表着这个区间内导数大，而只有较大的参数才会产生较大的导数。\n> 因此参数越大，我们认为模型越复杂。\n\n在L1和L2正则化的选择中，我们需要知道：\nL1正则化会产生更加稀疏的解，即求得的参数中会有更多的0；\nL2正则化会产生更多非0但值较小的参数。\n\n也就是说，L1正则化会过滤掉一些无用特征（参数为0，特征就不起作用了），因此L1正则化也是一种特征选择方法。只不过与我们平时手动选择特征不同的是，L1正则化是一种嵌入式地特征选择方法，其特征选择过程与模型的训练过程融为一体，同时完成了。\n\n所以，当所有特征中只有少部分起作用，而我们人工无法辨别时，可以用L1正则化。当大部分特征都能起作用时，使用L2正则化也许更合适。\n\n## 5. 性能度量\n模型训练完毕后，我们需要指标来评价其性能。\n在回归任务中，常用的性能度量是“均方误差”：\n$$\\frac{1}{m}\\sum_{i=1}^m(h(x ^ {(i)}) - y^{(i)}) ^ 2$$\n二分类常用的性能度量为查准率、查全率与F1。\n对于二分类问题，可将样本根据其真实类别与预测类别的组合划分为如下情况：\n<table>\n   <tr>\n      <td>真实情况</td>\n      <td>预测情况</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td>正例</td>\n      <td>反例</td>\n   </tr>\n   <tr>\n      <td>正例</td>\n      <td>TP(真正例)</td>\n      <td>FN(假反例)</td>\n   </tr>\n   <tr>\n      <td>反例</td>\n      <td>FP(假正例)</td>\n      <td>TN(真反例)</td>\n   </tr>\n   <tr>\n      <td></td>\n   </tr>\n</table>\n\n查准率P与查全率分别定义为：\n$$P = \\frac{TP}{TP+FP}$$\n$$R = \\frac{TP}{TP+FN}$$\n直观上理解，查准率就是我们预测的正例中，有多大比例预测正确了；\n查全率则是，在原始样本的所有正例中，我们有多大比例预测正确了。\n\n查准率与查全率是一对相互矛盾的指标。一般来说，查准率高时，查全率往往偏低；查全率高时，查准率往往偏低。\n通常两个模型的查准率与查全率无法比较孰优孰劣时，我们应该综合考虑这两个指标。\n常用的是F1度量：\n$$F1 = \\frac{2·P·R}{P+R} = \\frac{2·TP}{样例总数+TP-TN}$$\n在平时的应用过程中，可以根据实际任务对查准率或查全率的要求来改变权重，来获取更一般的F度量。\n## 写在后面\n本文从广义线性模型出发，推导了LR模型的产生，损失函数的建立，如何去优化损失函数，正则化以及性能度量。希望能够帮助到大家。由于所学粗浅，文中如有错误或不足，还请各位读者批评指正，感激不尽！\n我的邮箱：3120104930@zju.edu.cn\n","source":"_posts/浅谈逻辑斯蒂回归.md","raw":"\n---\ntitle: 机器学习算法系列（1）- 逻辑斯蒂回归\ndate: 2018-01-21 15:15:46\ntags: ML \n---\n\n<!-- more -->\n\n> 转载请注明出处：\n> https://zhuyuhe.github.io/2018/01/21/%E6%B5%85%E8%B0%88%E9%80%BB%E8%BE%91%E6%96%AF%E8%92%82%E5%9B%9E%E5%BD%92/\n\n博主即将开始求职之旅，于是搭了这个博客，将备战春招和秋招的复习笔记记录于此。\n此系列是对机器学习算法理论的复习，力求搞懂算法的来龙去脉，公式繁多，废话较少。\n以后有时间会在此基础上进行完善，力求通俗易懂。\n如有不足之处，还请各位读者指正！\n\n## 1.从广义线性模型到sigmoid函数\n首先，LR是二分类模型，我们假设二分类问题服从伯努利分布。即其概率分布为：\n$$P(y;\\phi)= \\phi^y (1-\\phi)^{1-y} = exp(ylog\\phi + (1-y)log(1-\\phi))=exp(ylog\\frac{\\phi}{1-\\phi} + log(1-\\phi))$$\n而伯努利分布属于指数蔟分布，即其概率分布可以写成如下形式：\n$$P(y;\\eta)= b(y)exp(\\eta^TT(y)-\\alpha(\\eta))$$\n其中，$\\eta$为自然参数。\n广义线性模型认为输入x与自然参数$\\eta$为线性关系，即$\\eta = \\theta^TX$。\n对比上述两式可以得到：\n$$b(y)  =  1$$ \n$$T(y) =  y $$\n$$\\eta  =  log\\frac{\\phi}{1-\\phi} $$\n\n\n所以有\n$$\\theta^TX = \\eta = log\\frac{\\phi}{1-\\phi}$$\n\n得到\n$$\\phi = \\frac{1}{1+e ^ {-\\theta^TX}}$$\n\n这里的$\\phi$就是伯努利分布中的P(Y=1|X)\n而LR中的模型输出\n$$h(x) = E(y|x) = 0 · P(Y=0|X) + 1 · P(Y=1|X) = \\frac{1}{1+e ^ {-\\theta^TX}}$$\n\n\n\n这就推导出了逻辑斯蒂回归模型。也解释了为什么LR要用sigmoid函数，因为我们从广义线性模型出发，推导出的LR模型刚好就是sigmoid函数形式的。\n并且sigmoid有很多良好的数学性质：\n\n - 连续可导\n - 值域为（0,1）,给了模型可解释性，即将输出结果解释为对应于该分类的概率\n \n \n下一节我们将从推导出的lr模型出发，去看看它的损失函数是怎么来的。\n\n## 2. 从极大似然估计到损失函数\n给定一组数据，我们需要用这组数据去找到最好的参数$\\theta$。\n我们认为使观测结果（即现有的数据）出现的概率最大的参数$\\theta$就是最优的参数。\n这种思想就是极大似然估计。\n假设这组数据独立同分布，其联合概率可以写成各样本出现概率的乘积。即\n\n\n$$L(\\theta) = \\prod_{i=1} ^ m P_i = \\prod_{i=1} ^ m {P(y ^ {(i)}=1 | X ^ {(i)})}^{y ^ {(i)}}{P(y ^ {(i)}=0 | X ^ {(i)})} ^ {1-y ^ {(i)}}$$\n\n\n\n以上函数称为似然函数。\n我们的目标便是最大化似然函数，即找到使联合概率（也就是似然函数）最大的参数$\\theta$。\n为了方便求解，对似然函数取对数，得到对数似然函数：\n\n\n$$log L(\\theta) = \\sum_{i=1} ^ m y ^ {(i)}log \\frac{1}{1+e ^ {-\\theta ^ TX}} + (1-y ^ {(i)})log \\frac{1}{1+e ^ {\\theta ^ TX}}$$\n\n\n对对数似然函数取负号，求平均，就得到了LR模型的损失函数：\n\n\n$$J(\\theta) = -\\frac{1}{m}\\sum_{i=1}^m (y ^ {(i)}log \\frac{1}{1+e ^ {-\\theta^TX}} + (1-y^{(i)})log \\frac{1}{1+e ^ {\\theta^TX}})$$\n\n\n现在我们的目标就就很明确了：\n优化$J(\\theta)$，找出使$J(\\theta)$最小的参数$\\theta$，就是我们认为的最优的$\\theta$。\n\n## 3. 梯度下降法\n梯度下降法是常用的优化算法之一。\n针对LR，梯度下降法的过程如下：\n首先，有\n$$J(\\theta) = -\\frac{1}{m}\\sum_{i=1}^m (y ^ {(i)}log h(x^{(i)}) + (1-y^{(i)})log (1-h(x^{(i)}))$$\n其中$h(x)  = \\frac{1}{1+e ^ {-\\theta^TX}}$\n接下来求损失函数$J(\\theta)$对参数$\\theta$的梯度：\n$$\\frac{\\partial J(\\theta)}{\\partial \\theta} = - \\frac{1}{m}\\sum_{i=1}^m[\\frac{y ^ {(i)}}{h(x^{(i)})}·\\frac{\\partial h(x^{(i)})}{\\partial \\theta} - \\frac{1- y ^ {(i)}}{1 - h(x^{(i)})}·\\frac{\\partial h(x^{(i)})}{\\partial \\theta}] = -\\frac{1}{m} \\sum_{i=1}^m\\frac{\\partial h(x^{(i)})}{\\partial \\theta}·\\frac{y^{(i)} - h(x^{(i)})}{ h(x^{(i)})(1 - h(x^{(i)}))}$$\n将h(x)带入上式：\n$$\\frac{\\partial J(\\theta)}{\\partial \\theta} = \\frac{1}{m}\\sum_{i=1}^m( h(x^{(i)}) - y^{(i)})·x ^ {(i)}$$\n得到迭代公式：\n$$\\theta := \\theta - \\alpha\\frac{1}{m}\\sum_{i=1}^m( h(x^{(i)}) - y^{(i)})·x ^ {(i)}$$\n$\\alpha$和$\\frac{1}{m}$为常数，因此将其合并，得到：\n$$\\theta := \\theta - \\alpha\\sum_{i=1}^m( h(x^{(i)}) - y^{(i)})·x ^ {(i)}$$\n$\\alpha$称为learning rate。\n注意，公式中的变量均为向量形式。\n至此，我们得到了参数$\\theta$的迭代公式，不断迭代直到收敛或损失函数变化很小，我们就得到了最优参数$\\theta$\n## 4. 正则化\n\n### 4.1 假设空间与奥卡姆剃刀原理\n给定我们一组数据，我们认为这组数据为观测结果。符合这组观测结果的假设有很多。\n我们可以把学习过程看做在所有假设组成的空间中进行搜索的过程。\n在这个搜索过程中，我们可能会找到许多满足这组观测数据的假设。\n比如，坐标系下两点，我们可以用直线拟合，也可以用二次曲线拟合等等。\n当出现两个模型均很好地符合当前数据时，我们有一个选择模型的指导原则：\n\n> 奥卡姆剃刀原理：这是一种常用的、自然科学研究中最基本的原则，即“若有多个假设与观察一致，则选最简单的那个”\n\n因此，我们需要在模型的学习过程中，加入这个指导原则。\n这个过程，就叫正则化。又叫结构风险最小化。\n\n### 4.2 L0/L1/L2正则化\n\n一般，我们认为，参数越少，模型越简单。\n理想情况下，我们可以在损失函数中加入（不为0的）参数个数来惩罚模型复杂度。\n即\n$$J(\\theta) = -\\frac{1}{m}\\sum_{i=1}^m (y ^ {(i)}log h(x^{(i)}) + (1-y^{(i)})log (1-h(x^{(i)})) + \\lambda\\sum_{i=1}^V1（\\theta_i）$$\n其中，V为参数数量，并且\n$$\\begin{equation}\n1(x) = \\begin{cases}\n0, & \\text{if x = 0}\\newline\n1, & \\text{if x != 0}\n\\end{cases}\n\\end{equation}$$\n这种方法叫做L0正则化。\n但实际中并不会使用L0正则化，因为很难求解。\n因此实际中往往使用L1或L2正则化来替代L0正则化。\nL1正则化为：\n$$\\lambda||\\theta||_1 = \\lambda \\sum _{i=1}^V|\\theta|$$\nL2正则化为：\n$$\\lambda||\\theta||_2 = \\lambda \\sqrt{\\sum _ {i=1}^V \\theta_i ^ 2}$$\nL1正则化和L2正则化都对参数的大小进行了惩罚。这里先说明一个问题：\n\n> 为什么认为参数越小模型复杂度也越小呢？\n> 因为越复杂的模型，越是尝试对所有样本进行拟合，包括一些异常点。\n> 这会导致模型在较小的输入区间内，产生较大的输出波动。\n> 较大的波动代表着这个区间内导数大，而只有较大的参数才会产生较大的导数。\n> 因此参数越大，我们认为模型越复杂。\n\n在L1和L2正则化的选择中，我们需要知道：\nL1正则化会产生更加稀疏的解，即求得的参数中会有更多的0；\nL2正则化会产生更多非0但值较小的参数。\n\n也就是说，L1正则化会过滤掉一些无用特征（参数为0，特征就不起作用了），因此L1正则化也是一种特征选择方法。只不过与我们平时手动选择特征不同的是，L1正则化是一种嵌入式地特征选择方法，其特征选择过程与模型的训练过程融为一体，同时完成了。\n\n所以，当所有特征中只有少部分起作用，而我们人工无法辨别时，可以用L1正则化。当大部分特征都能起作用时，使用L2正则化也许更合适。\n\n## 5. 性能度量\n模型训练完毕后，我们需要指标来评价其性能。\n在回归任务中，常用的性能度量是“均方误差”：\n$$\\frac{1}{m}\\sum_{i=1}^m(h(x ^ {(i)}) - y^{(i)}) ^ 2$$\n二分类常用的性能度量为查准率、查全率与F1。\n对于二分类问题，可将样本根据其真实类别与预测类别的组合划分为如下情况：\n<table>\n   <tr>\n      <td>真实情况</td>\n      <td>预测情况</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td>正例</td>\n      <td>反例</td>\n   </tr>\n   <tr>\n      <td>正例</td>\n      <td>TP(真正例)</td>\n      <td>FN(假反例)</td>\n   </tr>\n   <tr>\n      <td>反例</td>\n      <td>FP(假正例)</td>\n      <td>TN(真反例)</td>\n   </tr>\n   <tr>\n      <td></td>\n   </tr>\n</table>\n\n查准率P与查全率分别定义为：\n$$P = \\frac{TP}{TP+FP}$$\n$$R = \\frac{TP}{TP+FN}$$\n直观上理解，查准率就是我们预测的正例中，有多大比例预测正确了；\n查全率则是，在原始样本的所有正例中，我们有多大比例预测正确了。\n\n查准率与查全率是一对相互矛盾的指标。一般来说，查准率高时，查全率往往偏低；查全率高时，查准率往往偏低。\n通常两个模型的查准率与查全率无法比较孰优孰劣时，我们应该综合考虑这两个指标。\n常用的是F1度量：\n$$F1 = \\frac{2·P·R}{P+R} = \\frac{2·TP}{样例总数+TP-TN}$$\n在平时的应用过程中，可以根据实际任务对查准率或查全率的要求来改变权重，来获取更一般的F度量。\n## 写在后面\n本文从广义线性模型出发，推导了LR模型的产生，损失函数的建立，如何去优化损失函数，正则化以及性能度量。希望能够帮助到大家。由于所学粗浅，文中如有错误或不足，还请各位读者批评指正，感激不尽！\n我的邮箱：3120104930@zju.edu.cn\n","slug":"浅谈逻辑斯蒂回归","published":1,"updated":"2018-01-26T13:37:59.724Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqw6heil0001gsuj2m9e2hn5","content":"<a id=\"more\"></a>\n<blockquote>\n<p>转载请注明出处：<br><a href=\"https://zhuyuhe.github.io/2018/01/21/%E6%B5%85%E8%B0%88%E9%80%BB%E8%BE%91%E6%96%AF%E8%92%82%E5%9B%9E%E5%BD%92/\">https://zhuyuhe.github.io/2018/01/21/%E6%B5%85%E8%B0%88%E9%80%BB%E8%BE%91%E6%96%AF%E8%92%82%E5%9B%9E%E5%BD%92/</a></p>\n</blockquote>\n<p>博主即将开始求职之旅，于是搭了这个博客，将备战春招和秋招的复习笔记记录于此。<br>此系列是对机器学习算法理论的复习，力求搞懂算法的来龙去脉，公式繁多，废话较少。<br>以后有时间会在此基础上进行完善，力求通俗易懂。<br>如有不足之处，还请各位读者指正！</p>\n<h2 id=\"1-从广义线性模型到sigmoid函数\"><a href=\"#1-从广义线性模型到sigmoid函数\" class=\"headerlink\" title=\"1.从广义线性模型到sigmoid函数\"></a>1.从广义线性模型到sigmoid函数</h2><p>首先，LR是二分类模型，我们假设二分类问题服从伯努利分布。即其概率分布为：</p>\n<script type=\"math/tex; mode=display\">P(y;\\phi)= \\phi^y (1-\\phi)^{1-y} = exp(ylog\\phi + (1-y)log(1-\\phi))=exp(ylog\\frac{\\phi}{1-\\phi} + log(1-\\phi))</script><p>而伯努利分布属于指数蔟分布，即其概率分布可以写成如下形式：</p>\n<script type=\"math/tex; mode=display\">P(y;\\eta)= b(y)exp(\\eta^TT(y)-\\alpha(\\eta))</script><p>其中，$\\eta$为自然参数。<br>广义线性模型认为输入x与自然参数$\\eta$为线性关系，即$\\eta = \\theta^TX$。<br>对比上述两式可以得到：</p>\n<script type=\"math/tex; mode=display\">b(y)  =  1</script><script type=\"math/tex; mode=display\">T(y) =  y</script><script type=\"math/tex; mode=display\">\\eta  =  log\\frac{\\phi}{1-\\phi}</script><p>所以有</p>\n<script type=\"math/tex; mode=display\">\\theta^TX = \\eta = log\\frac{\\phi}{1-\\phi}</script><p>得到</p>\n<script type=\"math/tex; mode=display\">\\phi = \\frac{1}{1+e ^ {-\\theta^TX}}</script><p>这里的$\\phi$就是伯努利分布中的P(Y=1|X)<br>而LR中的模型输出</p>\n<script type=\"math/tex; mode=display\">h(x) = E(y|x) = 0 · P(Y=0|X) + 1 · P(Y=1|X) = \\frac{1}{1+e ^ {-\\theta^TX}}</script><p>这就推导出了逻辑斯蒂回归模型。也解释了为什么LR要用sigmoid函数，因为我们从广义线性模型出发，推导出的LR模型刚好就是sigmoid函数形式的。<br>并且sigmoid有很多良好的数学性质：</p>\n<ul>\n<li>连续可导</li>\n<li>值域为（0,1）,给了模型可解释性，即将输出结果解释为对应于该分类的概率</li>\n</ul>\n<p>下一节我们将从推导出的lr模型出发，去看看它的损失函数是怎么来的。</p>\n<h2 id=\"2-从极大似然估计到损失函数\"><a href=\"#2-从极大似然估计到损失函数\" class=\"headerlink\" title=\"2. 从极大似然估计到损失函数\"></a>2. 从极大似然估计到损失函数</h2><p>给定一组数据，我们需要用这组数据去找到最好的参数$\\theta$。<br>我们认为使观测结果（即现有的数据）出现的概率最大的参数$\\theta$就是最优的参数。<br>这种思想就是极大似然估计。<br>假设这组数据独立同分布，其联合概率可以写成各样本出现概率的乘积。即</p>\n<script type=\"math/tex; mode=display\">L(\\theta) = \\prod_{i=1} ^ m P_i = \\prod_{i=1} ^ m {P(y ^ {(i)}=1 | X ^ {(i)})}^{y ^ {(i)}}{P(y ^ {(i)}=0 | X ^ {(i)})} ^ {1-y ^ {(i)}}</script><p>以上函数称为似然函数。<br>我们的目标便是最大化似然函数，即找到使联合概率（也就是似然函数）最大的参数$\\theta$。<br>为了方便求解，对似然函数取对数，得到对数似然函数：</p>\n<script type=\"math/tex; mode=display\">log L(\\theta) = \\sum_{i=1} ^ m y ^ {(i)}log \\frac{1}{1+e ^ {-\\theta ^ TX}} + (1-y ^ {(i)})log \\frac{1}{1+e ^ {\\theta ^ TX}}</script><p>对对数似然函数取负号，求平均，就得到了LR模型的损失函数：</p>\n<script type=\"math/tex; mode=display\">J(\\theta) = -\\frac{1}{m}\\sum_{i=1}^m (y ^ {(i)}log \\frac{1}{1+e ^ {-\\theta^TX}} + (1-y^{(i)})log \\frac{1}{1+e ^ {\\theta^TX}})</script><p>现在我们的目标就就很明确了：<br>优化$J(\\theta)$，找出使$J(\\theta)$最小的参数$\\theta$，就是我们认为的最优的$\\theta$。</p>\n<h2 id=\"3-梯度下降法\"><a href=\"#3-梯度下降法\" class=\"headerlink\" title=\"3. 梯度下降法\"></a>3. 梯度下降法</h2><p>梯度下降法是常用的优化算法之一。<br>针对LR，梯度下降法的过程如下：<br>首先，有</p>\n<script type=\"math/tex; mode=display\">J(\\theta) = -\\frac{1}{m}\\sum_{i=1}^m (y ^ {(i)}log h(x^{(i)}) + (1-y^{(i)})log (1-h(x^{(i)}))</script><p>其中$h(x)  = \\frac{1}{1+e ^ {-\\theta^TX}}$<br>接下来求损失函数$J(\\theta)$对参数$\\theta$的梯度：</p>\n<script type=\"math/tex; mode=display\">\\frac{\\partial J(\\theta)}{\\partial \\theta} = - \\frac{1}{m}\\sum_{i=1}^m[\\frac{y ^ {(i)}}{h(x^{(i)})}·\\frac{\\partial h(x^{(i)})}{\\partial \\theta} - \\frac{1- y ^ {(i)}}{1 - h(x^{(i)})}·\\frac{\\partial h(x^{(i)})}{\\partial \\theta}] = -\\frac{1}{m} \\sum_{i=1}^m\\frac{\\partial h(x^{(i)})}{\\partial \\theta}·\\frac{y^{(i)} - h(x^{(i)})}{ h(x^{(i)})(1 - h(x^{(i)}))}</script><p>将h(x)带入上式：</p>\n<script type=\"math/tex; mode=display\">\\frac{\\partial J(\\theta)}{\\partial \\theta} = \\frac{1}{m}\\sum_{i=1}^m( h(x^{(i)}) - y^{(i)})·x ^ {(i)}</script><p>得到迭代公式：</p>\n<script type=\"math/tex; mode=display\">\\theta := \\theta - \\alpha\\frac{1}{m}\\sum_{i=1}^m( h(x^{(i)}) - y^{(i)})·x ^ {(i)}</script><p>$\\alpha$和$\\frac{1}{m}$为常数，因此将其合并，得到：</p>\n<script type=\"math/tex; mode=display\">\\theta := \\theta - \\alpha\\sum_{i=1}^m( h(x^{(i)}) - y^{(i)})·x ^ {(i)}</script><p>$\\alpha$称为learning rate。<br>注意，公式中的变量均为向量形式。<br>至此，我们得到了参数$\\theta$的迭代公式，不断迭代直到收敛或损失函数变化很小，我们就得到了最优参数$\\theta$</p>\n<h2 id=\"4-正则化\"><a href=\"#4-正则化\" class=\"headerlink\" title=\"4. 正则化\"></a>4. 正则化</h2><h3 id=\"4-1-假设空间与奥卡姆剃刀原理\"><a href=\"#4-1-假设空间与奥卡姆剃刀原理\" class=\"headerlink\" title=\"4.1 假设空间与奥卡姆剃刀原理\"></a>4.1 假设空间与奥卡姆剃刀原理</h3><p>给定我们一组数据，我们认为这组数据为观测结果。符合这组观测结果的假设有很多。<br>我们可以把学习过程看做在所有假设组成的空间中进行搜索的过程。<br>在这个搜索过程中，我们可能会找到许多满足这组观测数据的假设。<br>比如，坐标系下两点，我们可以用直线拟合，也可以用二次曲线拟合等等。<br>当出现两个模型均很好地符合当前数据时，我们有一个选择模型的指导原则：</p>\n<blockquote>\n<p>奥卡姆剃刀原理：这是一种常用的、自然科学研究中最基本的原则，即“若有多个假设与观察一致，则选最简单的那个”</p>\n</blockquote>\n<p>因此，我们需要在模型的学习过程中，加入这个指导原则。<br>这个过程，就叫正则化。又叫结构风险最小化。</p>\n<h3 id=\"4-2-L0-L1-L2正则化\"><a href=\"#4-2-L0-L1-L2正则化\" class=\"headerlink\" title=\"4.2 L0/L1/L2正则化\"></a>4.2 L0/L1/L2正则化</h3><p>一般，我们认为，参数越少，模型越简单。<br>理想情况下，我们可以在损失函数中加入（不为0的）参数个数来惩罚模型复杂度。<br>即</p>\n<script type=\"math/tex; mode=display\">J(\\theta) = -\\frac{1}{m}\\sum_{i=1}^m (y ^ {(i)}log h(x^{(i)}) + (1-y^{(i)})log (1-h(x^{(i)})) + \\lambda\\sum_{i=1}^V1（\\theta_i）</script><p>其中，V为参数数量，并且</p>\n<script type=\"math/tex; mode=display\">\\begin{equation}\n1(x) = \\begin{cases}\n0, & \\text{if x = 0}\\newline\n1, & \\text{if x != 0}\n\\end{cases}\n\\end{equation}</script><p>这种方法叫做L0正则化。<br>但实际中并不会使用L0正则化，因为很难求解。<br>因此实际中往往使用L1或L2正则化来替代L0正则化。<br>L1正则化为：</p>\n<script type=\"math/tex; mode=display\">\\lambda||\\theta||_1 = \\lambda \\sum _{i=1}^V|\\theta|</script><p>L2正则化为：</p>\n<script type=\"math/tex; mode=display\">\\lambda||\\theta||_2 = \\lambda \\sqrt{\\sum _ {i=1}^V \\theta_i ^ 2}</script><p>L1正则化和L2正则化都对参数的大小进行了惩罚。这里先说明一个问题：</p>\n<blockquote>\n<p>为什么认为参数越小模型复杂度也越小呢？<br>因为越复杂的模型，越是尝试对所有样本进行拟合，包括一些异常点。<br>这会导致模型在较小的输入区间内，产生较大的输出波动。<br>较大的波动代表着这个区间内导数大，而只有较大的参数才会产生较大的导数。<br>因此参数越大，我们认为模型越复杂。</p>\n</blockquote>\n<p>在L1和L2正则化的选择中，我们需要知道：<br>L1正则化会产生更加稀疏的解，即求得的参数中会有更多的0；<br>L2正则化会产生更多非0但值较小的参数。</p>\n<p>也就是说，L1正则化会过滤掉一些无用特征（参数为0，特征就不起作用了），因此L1正则化也是一种特征选择方法。只不过与我们平时手动选择特征不同的是，L1正则化是一种嵌入式地特征选择方法，其特征选择过程与模型的训练过程融为一体，同时完成了。</p>\n<p>所以，当所有特征中只有少部分起作用，而我们人工无法辨别时，可以用L1正则化。当大部分特征都能起作用时，使用L2正则化也许更合适。</p>\n<h2 id=\"5-性能度量\"><a href=\"#5-性能度量\" class=\"headerlink\" title=\"5. 性能度量\"></a>5. 性能度量</h2><p>模型训练完毕后，我们需要指标来评价其性能。<br>在回归任务中，常用的性能度量是“均方误差”：</p>\n<script type=\"math/tex; mode=display\">\\frac{1}{m}\\sum_{i=1}^m(h(x ^ {(i)}) - y^{(i)}) ^ 2</script><p>二分类常用的性能度量为查准率、查全率与F1。<br>对于二分类问题，可将样本根据其真实类别与预测类别的组合划分为如下情况：</p>\n<table>\n   <tr>\n      <td>真实情况</td>\n      <td>预测情况</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td>正例</td>\n      <td>反例</td>\n   </tr>\n   <tr>\n      <td>正例</td>\n      <td>TP(真正例)</td>\n      <td>FN(假反例)</td>\n   </tr>\n   <tr>\n      <td>反例</td>\n      <td>FP(假正例)</td>\n      <td>TN(真反例)</td>\n   </tr>\n   <tr>\n      <td></td>\n   </tr>\n</table>\n\n<p>查准率P与查全率分别定义为：</p>\n<script type=\"math/tex; mode=display\">P = \\frac{TP}{TP+FP}</script><script type=\"math/tex; mode=display\">R = \\frac{TP}{TP+FN}</script><p>直观上理解，查准率就是我们预测的正例中，有多大比例预测正确了；<br>查全率则是，在原始样本的所有正例中，我们有多大比例预测正确了。</p>\n<p>查准率与查全率是一对相互矛盾的指标。一般来说，查准率高时，查全率往往偏低；查全率高时，查准率往往偏低。<br>通常两个模型的查准率与查全率无法比较孰优孰劣时，我们应该综合考虑这两个指标。<br>常用的是F1度量：</p>\n<script type=\"math/tex; mode=display\">F1 = \\frac{2·P·R}{P+R} = \\frac{2·TP}{样例总数+TP-TN}</script><p>在平时的应用过程中，可以根据实际任务对查准率或查全率的要求来改变权重，来获取更一般的F度量。</p>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><p>本文从广义线性模型出发，推导了LR模型的产生，损失函数的建立，如何去优化损失函数，正则化以及性能度量。希望能够帮助到大家。由于所学粗浅，文中如有错误或不足，还请各位读者批评指正，感激不尽！<br>我的邮箱：3120104930@zju.edu.cn</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>转载请注明出处：<br><a href=\"https://zhuyuhe.github.io/2018/01/21/%E6%B5%85%E8%B0%88%E9%80%BB%E8%BE%91%E6%96%AF%E8%92%82%E5%9B%9E%E5%BD%92/\">https://zhuyuhe.github.io/2018/01/21/%E6%B5%85%E8%B0%88%E9%80%BB%E8%BE%91%E6%96%AF%E8%92%82%E5%9B%9E%E5%BD%92/</a></p>\n</blockquote>\n<p>博主即将开始求职之旅，于是搭了这个博客，将备战春招和秋招的复习笔记记录于此。<br>此系列是对机器学习算法理论的复习，力求搞懂算法的来龙去脉，公式繁多，废话较少。<br>以后有时间会在此基础上进行完善，力求通俗易懂。<br>如有不足之处，还请各位读者指正！</p>\n<h2 id=\"1-从广义线性模型到sigmoid函数\"><a href=\"#1-从广义线性模型到sigmoid函数\" class=\"headerlink\" title=\"1.从广义线性模型到sigmoid函数\"></a>1.从广义线性模型到sigmoid函数</h2><p>首先，LR是二分类模型，我们假设二分类问题服从伯努利分布。即其概率分布为：</p>\n<script type=\"math/tex; mode=display\">P(y;\\phi)= \\phi^y (1-\\phi)^{1-y} = exp(ylog\\phi + (1-y)log(1-\\phi))=exp(ylog\\frac{\\phi}{1-\\phi} + log(1-\\phi))</script><p>而伯努利分布属于指数蔟分布，即其概率分布可以写成如下形式：</p>\n<script type=\"math/tex; mode=display\">P(y;\\eta)= b(y)exp(\\eta^TT(y)-\\alpha(\\eta))</script><p>其中，$\\eta$为自然参数。<br>广义线性模型认为输入x与自然参数$\\eta$为线性关系，即$\\eta = \\theta^TX$。<br>对比上述两式可以得到：</p>\n<script type=\"math/tex; mode=display\">b(y)  =  1</script><script type=\"math/tex; mode=display\">T(y) =  y</script><script type=\"math/tex; mode=display\">\\eta  =  log\\frac{\\phi}{1-\\phi}</script><p>所以有</p>\n<script type=\"math/tex; mode=display\">\\theta^TX = \\eta = log\\frac{\\phi}{1-\\phi}</script><p>得到</p>\n<script type=\"math/tex; mode=display\">\\phi = \\frac{1}{1+e ^ {-\\theta^TX}}</script><p>这里的$\\phi$就是伯努利分布中的P(Y=1|X)<br>而LR中的模型输出</p>\n<script type=\"math/tex; mode=display\">h(x) = E(y|x) = 0 · P(Y=0|X) + 1 · P(Y=1|X) = \\frac{1}{1+e ^ {-\\theta^TX}}</script><p>这就推导出了逻辑斯蒂回归模型。也解释了为什么LR要用sigmoid函数，因为我们从广义线性模型出发，推导出的LR模型刚好就是sigmoid函数形式的。<br>并且sigmoid有很多良好的数学性质：</p>\n<ul>\n<li>连续可导</li>\n<li>值域为（0,1）,给了模型可解释性，即将输出结果解释为对应于该分类的概率</li>\n</ul>\n<p>下一节我们将从推导出的lr模型出发，去看看它的损失函数是怎么来的。</p>\n<h2 id=\"2-从极大似然估计到损失函数\"><a href=\"#2-从极大似然估计到损失函数\" class=\"headerlink\" title=\"2. 从极大似然估计到损失函数\"></a>2. 从极大似然估计到损失函数</h2><p>给定一组数据，我们需要用这组数据去找到最好的参数$\\theta$。<br>我们认为使观测结果（即现有的数据）出现的概率最大的参数$\\theta$就是最优的参数。<br>这种思想就是极大似然估计。<br>假设这组数据独立同分布，其联合概率可以写成各样本出现概率的乘积。即</p>\n<script type=\"math/tex; mode=display\">L(\\theta) = \\prod_{i=1} ^ m P_i = \\prod_{i=1} ^ m {P(y ^ {(i)}=1 | X ^ {(i)})}^{y ^ {(i)}}{P(y ^ {(i)}=0 | X ^ {(i)})} ^ {1-y ^ {(i)}}</script><p>以上函数称为似然函数。<br>我们的目标便是最大化似然函数，即找到使联合概率（也就是似然函数）最大的参数$\\theta$。<br>为了方便求解，对似然函数取对数，得到对数似然函数：</p>\n<script type=\"math/tex; mode=display\">log L(\\theta) = \\sum_{i=1} ^ m y ^ {(i)}log \\frac{1}{1+e ^ {-\\theta ^ TX}} + (1-y ^ {(i)})log \\frac{1}{1+e ^ {\\theta ^ TX}}</script><p>对对数似然函数取负号，求平均，就得到了LR模型的损失函数：</p>\n<script type=\"math/tex; mode=display\">J(\\theta) = -\\frac{1}{m}\\sum_{i=1}^m (y ^ {(i)}log \\frac{1}{1+e ^ {-\\theta^TX}} + (1-y^{(i)})log \\frac{1}{1+e ^ {\\theta^TX}})</script><p>现在我们的目标就就很明确了：<br>优化$J(\\theta)$，找出使$J(\\theta)$最小的参数$\\theta$，就是我们认为的最优的$\\theta$。</p>\n<h2 id=\"3-梯度下降法\"><a href=\"#3-梯度下降法\" class=\"headerlink\" title=\"3. 梯度下降法\"></a>3. 梯度下降法</h2><p>梯度下降法是常用的优化算法之一。<br>针对LR，梯度下降法的过程如下：<br>首先，有</p>\n<script type=\"math/tex; mode=display\">J(\\theta) = -\\frac{1}{m}\\sum_{i=1}^m (y ^ {(i)}log h(x^{(i)}) + (1-y^{(i)})log (1-h(x^{(i)}))</script><p>其中$h(x)  = \\frac{1}{1+e ^ {-\\theta^TX}}$<br>接下来求损失函数$J(\\theta)$对参数$\\theta$的梯度：</p>\n<script type=\"math/tex; mode=display\">\\frac{\\partial J(\\theta)}{\\partial \\theta} = - \\frac{1}{m}\\sum_{i=1}^m[\\frac{y ^ {(i)}}{h(x^{(i)})}·\\frac{\\partial h(x^{(i)})}{\\partial \\theta} - \\frac{1- y ^ {(i)}}{1 - h(x^{(i)})}·\\frac{\\partial h(x^{(i)})}{\\partial \\theta}] = -\\frac{1}{m} \\sum_{i=1}^m\\frac{\\partial h(x^{(i)})}{\\partial \\theta}·\\frac{y^{(i)} - h(x^{(i)})}{ h(x^{(i)})(1 - h(x^{(i)}))}</script><p>将h(x)带入上式：</p>\n<script type=\"math/tex; mode=display\">\\frac{\\partial J(\\theta)}{\\partial \\theta} = \\frac{1}{m}\\sum_{i=1}^m( h(x^{(i)}) - y^{(i)})·x ^ {(i)}</script><p>得到迭代公式：</p>\n<script type=\"math/tex; mode=display\">\\theta := \\theta - \\alpha\\frac{1}{m}\\sum_{i=1}^m( h(x^{(i)}) - y^{(i)})·x ^ {(i)}</script><p>$\\alpha$和$\\frac{1}{m}$为常数，因此将其合并，得到：</p>\n<script type=\"math/tex; mode=display\">\\theta := \\theta - \\alpha\\sum_{i=1}^m( h(x^{(i)}) - y^{(i)})·x ^ {(i)}</script><p>$\\alpha$称为learning rate。<br>注意，公式中的变量均为向量形式。<br>至此，我们得到了参数$\\theta$的迭代公式，不断迭代直到收敛或损失函数变化很小，我们就得到了最优参数$\\theta$</p>\n<h2 id=\"4-正则化\"><a href=\"#4-正则化\" class=\"headerlink\" title=\"4. 正则化\"></a>4. 正则化</h2><h3 id=\"4-1-假设空间与奥卡姆剃刀原理\"><a href=\"#4-1-假设空间与奥卡姆剃刀原理\" class=\"headerlink\" title=\"4.1 假设空间与奥卡姆剃刀原理\"></a>4.1 假设空间与奥卡姆剃刀原理</h3><p>给定我们一组数据，我们认为这组数据为观测结果。符合这组观测结果的假设有很多。<br>我们可以把学习过程看做在所有假设组成的空间中进行搜索的过程。<br>在这个搜索过程中，我们可能会找到许多满足这组观测数据的假设。<br>比如，坐标系下两点，我们可以用直线拟合，也可以用二次曲线拟合等等。<br>当出现两个模型均很好地符合当前数据时，我们有一个选择模型的指导原则：</p>\n<blockquote>\n<p>奥卡姆剃刀原理：这是一种常用的、自然科学研究中最基本的原则，即“若有多个假设与观察一致，则选最简单的那个”</p>\n</blockquote>\n<p>因此，我们需要在模型的学习过程中，加入这个指导原则。<br>这个过程，就叫正则化。又叫结构风险最小化。</p>\n<h3 id=\"4-2-L0-L1-L2正则化\"><a href=\"#4-2-L0-L1-L2正则化\" class=\"headerlink\" title=\"4.2 L0/L1/L2正则化\"></a>4.2 L0/L1/L2正则化</h3><p>一般，我们认为，参数越少，模型越简单。<br>理想情况下，我们可以在损失函数中加入（不为0的）参数个数来惩罚模型复杂度。<br>即</p>\n<script type=\"math/tex; mode=display\">J(\\theta) = -\\frac{1}{m}\\sum_{i=1}^m (y ^ {(i)}log h(x^{(i)}) + (1-y^{(i)})log (1-h(x^{(i)})) + \\lambda\\sum_{i=1}^V1（\\theta_i）</script><p>其中，V为参数数量，并且</p>\n<script type=\"math/tex; mode=display\">\\begin{equation}\n1(x) = \\begin{cases}\n0, & \\text{if x = 0}\\newline\n1, & \\text{if x != 0}\n\\end{cases}\n\\end{equation}</script><p>这种方法叫做L0正则化。<br>但实际中并不会使用L0正则化，因为很难求解。<br>因此实际中往往使用L1或L2正则化来替代L0正则化。<br>L1正则化为：</p>\n<script type=\"math/tex; mode=display\">\\lambda||\\theta||_1 = \\lambda \\sum _{i=1}^V|\\theta|</script><p>L2正则化为：</p>\n<script type=\"math/tex; mode=display\">\\lambda||\\theta||_2 = \\lambda \\sqrt{\\sum _ {i=1}^V \\theta_i ^ 2}</script><p>L1正则化和L2正则化都对参数的大小进行了惩罚。这里先说明一个问题：</p>\n<blockquote>\n<p>为什么认为参数越小模型复杂度也越小呢？<br>因为越复杂的模型，越是尝试对所有样本进行拟合，包括一些异常点。<br>这会导致模型在较小的输入区间内，产生较大的输出波动。<br>较大的波动代表着这个区间内导数大，而只有较大的参数才会产生较大的导数。<br>因此参数越大，我们认为模型越复杂。</p>\n</blockquote>\n<p>在L1和L2正则化的选择中，我们需要知道：<br>L1正则化会产生更加稀疏的解，即求得的参数中会有更多的0；<br>L2正则化会产生更多非0但值较小的参数。</p>\n<p>也就是说，L1正则化会过滤掉一些无用特征（参数为0，特征就不起作用了），因此L1正则化也是一种特征选择方法。只不过与我们平时手动选择特征不同的是，L1正则化是一种嵌入式地特征选择方法，其特征选择过程与模型的训练过程融为一体，同时完成了。</p>\n<p>所以，当所有特征中只有少部分起作用，而我们人工无法辨别时，可以用L1正则化。当大部分特征都能起作用时，使用L2正则化也许更合适。</p>\n<h2 id=\"5-性能度量\"><a href=\"#5-性能度量\" class=\"headerlink\" title=\"5. 性能度量\"></a>5. 性能度量</h2><p>模型训练完毕后，我们需要指标来评价其性能。<br>在回归任务中，常用的性能度量是“均方误差”：</p>\n<script type=\"math/tex; mode=display\">\\frac{1}{m}\\sum_{i=1}^m(h(x ^ {(i)}) - y^{(i)}) ^ 2</script><p>二分类常用的性能度量为查准率、查全率与F1。<br>对于二分类问题，可将样本根据其真实类别与预测类别的组合划分为如下情况：</p>\n<table>\n   <tr>\n      <td>真实情况</td>\n      <td>预测情况</td>\n      <td></td>\n   </tr>\n   <tr>\n      <td></td>\n      <td>正例</td>\n      <td>反例</td>\n   </tr>\n   <tr>\n      <td>正例</td>\n      <td>TP(真正例)</td>\n      <td>FN(假反例)</td>\n   </tr>\n   <tr>\n      <td>反例</td>\n      <td>FP(假正例)</td>\n      <td>TN(真反例)</td>\n   </tr>\n   <tr>\n      <td></td>\n   </tr>\n</table>\n\n<p>查准率P与查全率分别定义为：</p>\n<script type=\"math/tex; mode=display\">P = \\frac{TP}{TP+FP}</script><script type=\"math/tex; mode=display\">R = \\frac{TP}{TP+FN}</script><p>直观上理解，查准率就是我们预测的正例中，有多大比例预测正确了；<br>查全率则是，在原始样本的所有正例中，我们有多大比例预测正确了。</p>\n<p>查准率与查全率是一对相互矛盾的指标。一般来说，查准率高时，查全率往往偏低；查全率高时，查准率往往偏低。<br>通常两个模型的查准率与查全率无法比较孰优孰劣时，我们应该综合考虑这两个指标。<br>常用的是F1度量：</p>\n<script type=\"math/tex; mode=display\">F1 = \\frac{2·P·R}{P+R} = \\frac{2·TP}{样例总数+TP-TN}</script><p>在平时的应用过程中，可以根据实际任务对查准率或查全率的要求来改变权重，来获取更一般的F度量。</p>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><p>本文从广义线性模型出发，推导了LR模型的产生，损失函数的建立，如何去优化损失函数，正则化以及性能度量。希望能够帮助到大家。由于所学粗浅，文中如有错误或不足，还请各位读者批评指正，感激不尽！<br>我的邮箱：3120104930@zju.edu.cn</p>"},{"title":"深度学习服务器完整配置指南","_content":"\n<!-- more -->\n\n最近实验室配了一台深度学习服务器，服务器刚到时基本上只装了 ubuntu 操作系统，所以我也基本上是算从头配置了一台深度学习服务器。现将配置过程记录于此，以便帮助他人和方便交流。\n\n首先，我的深度学习服务器的配置为：\n - ubuntu 14.04 操作系统，16.04 应该也是一样的\n - Anaconda3 集成的 python 环境，使用 conda 进行虚拟环境管理\n - jupyterhub 提供的 jupyter notebook 功能\n - cuda 9.0 + cudnn 7.1 + tensorflow 1.5.0\n\n有了以上配置或环境，服务器就非常好用了。无论是用户虚拟环境管理，还是使用 jupyter notebook 都非常方便。\n\n好了，接下来开始逐个介绍。\n\n## 1. 网络配置\n服务器刚到，第一步就是要进行网络配置。网络配置好之后，就可以将服务器放入机房，不用再忍受噪音，进行远程操作了。我这里的服务器是接入的校园网，因此也只介绍校园网下的网络配置，其他情况的同学需要去查一下资料配置。\n\n### 1.1 接入校园网\n首先，使用网线介入校园网，打通物理层面。注意不要接错网口，我之前因为接错网口，导致花了半下午时间找问题，可以说是很尴尬了。\n\n接下来，使用 `ifconfig` 命令来查看网卡类型，`eth0` or `em1` 这种，我这里是 `em1`。然后修改 `/etc/network/interfaces` 如下：\n```python\n# This file describes the network interfaces available on your system\n# and how to activate them. For more information, see interfaces(5).\n# The loopback network interface\nauto lo\niface lo inet loopback\n# The primary network interface\nauto em1\n#iface em1 inet dhcp\niface em1 inet static\naddress xx.xx.xx.xx\nnetmask xxx.xxx.xxx.0\ngateway xx.xx.xx.xxx\ndns-nameservers xx.xx.x.xx\n```\n上面的配置其实就是给服务器设置一个静态 ip ，我们可以通过这个静态 ip 访问该服务器。然后配置网管，DNS 服务器什么的。和 windows 下配置类似，实验室用过有线的应该都懂。\n\n配置好之后，就可以连接内网了。使用 `ping 10.xx.xxx.xxx（你的校园网内网 ip 地址）` 来检查是否能连内网。\n\n注意，我这里记录的是我们学校的校园网接入方式，我不清楚不同学校的校园网接入方式是否相同，需要大家搞清楚。\n\n### 1.2 镜像源配置\n#### 1.2.1 更改 apt-get 镜像源\n将服务器只放在校园网环境下，这样做有两个好处：\n\n1. 安全\n2. 校园网速度非常快\n\n但很明显，如果只连校园网，我们将无法下载日常使用的软件或者包。但还好，这个问题很好解决，只需要修改镜像源即可。\n\n我们在使用 `apt-get install` 命令时，会向外网发送请求，下载我们需要的软件。而修改镜像源之后，则会转而向我们指定的网站发送请求。这里我们使用的是清华的镜像源，清华的镜像源使用校园网内网即可访问，非常适合我们这种校园网的服务器。\n\n首先，把 `/etc/apt/source.list` 文件备份，然后将 `source.list` 的内容修改如下（具体内容和 linux 发行版本有关，具体见 [Ubuntu 镜像使用帮助](https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/)）：\n\n```python\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-security main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-security main restricted universe multiverse\n# 预发布软件源，不建议启用\n# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-proposed main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-proposed main restricted universe multiverse\n```\n\n然后就可以在内网下使用 `apt-get install` 命令了。\n\n### 1.2.2 更改 pip 和 conda 源\n使用 pip 或者 conda 安装 python 模块非常方便，但是我们只接入了校园网，所以需要更改一下 pip 和 anaconda 的源。\n\npip 更改方式如下：\n修改 ~/.pip/pip.conf（没有就创建一个），内容如下：\n```python\n [global]\n index-url = https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\nconda 更改方式如下：\n```python\n# 命令行输入如下命令\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --set show_channel_urls yes\n```\n\n修改之后，可以测试一下速度，我这里能上 `10M/s`，还是非常快的。\n\n### 1.2.3 外网访问\n如果是在需要访问外网，可以使用 vpn 连接到外网。我这里使用的是校内流传的一个软件，不同学校不同。\n\n使用 `sudo dpkg -i xl2tpd_1.2.5%2Bzju-1_amd64.deb` 安装之后，按照下面方式配置：\n```python\n# 配置用户名和密码\n$ sudo vpn-connect -c\nConfigure L2TP VPN for ZJU.\n# 这里的Username是你的学号，后面的@代表你是10/30/50包月。\nUsername: 216....@10\nPassword: 你的密码\n# 配置完成，使用这个命令开启连接\n$ sudo vpn-connect\n#连接成功，可以ping一下百度，看是否能连外网了\n$ ping www.baidu.com\n# 重连，断开等，可以使用下面的命令查看\n$ vpn-connect -h\n```\n\n以上，基本上就是网络配置的内容了。以上配置好后，基本上就够一个服务器使用了，毕竟，作为计算型服务器，平时使用最多的也就是使用 ssh 远程访问和使用 pip 了。\n\n## 2. 环境配置\n这一节主要介绍下 python 环境配置。由于服务器需要多用户使用，因此虚拟环境必不可少。每个用户都使用自身的 python 虚拟环境，可以避免模块版本冲突等问题。此外，jupyter notebook 作为一个方便的 python 交互式环境，能在客户端使用它并且支持多用户使用，也是需要进行配置的。\n\n### 2.1 python 虚拟环境\npython 环境我们使用 Anaconda 进行配置。Anaconda 集成了 python 环境和常用的模块，可以帮我们省很多功夫。\n\n使用 `sudo apt-get install anaconda3` 安装 Anaconda3。也可以去网上下载 anaconda3 的安装包，上传到服务器之后进行安装。Anyway，只要能够成功安装就行，这一步很简单。\n\n之后，可以在命令行输入`python` 和 `conda` 来查看是否安装成功。\n\n最后需要修改全局变量，因为此时，只有 root 用户能够使用该环境，其他用户无法正常使用。修改方式如下：\n```python\necho 'PATH=/usr/lib/anaconda/bin:$PATH' >> /etc/profile.d/anaconda.sh\nsource /etc/profile\n```\n这样，所有用户都可以使用 Anaconda 了，也可以使用 conda 建立虚拟环境了。\n\n建议在使用服务器进行开发时，每位用户都在自己的 python 虚拟环境下进行开发，不要在全局安装 python 的包和库。建立虚拟环境的方式如下：\n```python\nlist all env:\n    conda info --env\ncreate a simple virtual env:\n    conda create -n MyEnvName python=3*\ndelete virtual env:\n    conda env remove -n MyEnvName\n```\n建立完成后，使用 `source activate MyEnvName` 进入虚拟环境，使用 `source deactivate` 推出虚拟环境。\n\n需要注意的是，在自己的虚拟环境下，使用 pip 安装 python 模块，还是安装到全局中的，需要使用 `conda -n myEnv install pip` 或者在虚拟环境下使用 `conda install pip` 来安装虚拟环境中的pip，这样在虚拟环境中使用pip就能将包安装到虚拟环境中了。\n\n### 2.2 jupyter notebook 配置\n在服务器开启 jupyter notebook 服务，可以在客户端使用浏览器登陆服务器的 jupyter notebook，但是如果多用户同时使用，就需要每个用户都进行配置然后开启服务，非常麻烦。\n\nJupyterhub 是一组进程，使用 JupyterHub 可以为组中的每个人分别提供单个用户的 Jupyter Notebook 服务器。具体使用方式见[JupyterHub](https://jupyterhub.readthedocs.io/en/0.7.0/quickstart.html)。\n\n## 3. 深度学习环境：cuda9.0 + cudnn7.1 + tensorflow 1.5.0\n我安装深度学习环境主要是为了使用 tensorflow, 但不同版本的 tensorflow 需要安装不同版本的 cuda ，所以需要先明确自己使用的 tensorflow 版本。我要使用 tensorflow 1.5.0 ，所以选择安装 cuda9.0 + cudnn7.1。\n\n### 3.1 什么是 cuda 和 cudnn\nCUDA 是由 NVIDIA 推出的一种集成技术，用于 GPU 的并行计算。\n\nCUDA 的作用，是与通用程序对接。比如，我们使用 python 写的程序，将数据和运算逻辑准备好之后，需要调用 CUDA 库提供的函数来传递给 CUDA，CUDA 再调用显卡驱动对 CUDA 程序进行编译，然后再将编译好的程序和数据传送给 GPU 进行运算。\n\n而 cuDNN 是用于深度神经网络的 GPU 加速计算库。它可以将卷积神经网路的计算变换为对 GPU 更友好的矩阵运算，可以有效提高整个网络的训练速度。\n\n要使用 tensorflow 的 GPU 版本，我们需要安装 CUDA 和 cuDNN。\n\n### 3.2 安装 cuda9.0 + cudnn7.1\n#### 3.2.1 安装前\n1. 首先，确保你的电脑上有 CUDA 支持的 GPU 硬件。\n\n在终端下，输入 `lspci | grep -i nvidia` 来查看。如果有 GPU 安装，会显示结果。\n\n2. 确保系统中安装了 gcc\n\n使用 `gcc --version` 来查看 gcc 版本，确保系统中已经安装了 gcc 。\n\n3. 验证系统是否安装了正确的内核头文件和开发包\n\n使用 `uname -r` 来查看系统的核版本。\n使用 `$ sudo apt-get install linux-headers-$(uname -r)` 来安装当前正在运行的内核的内核头文件和开发包。\n\n4. 下载 CUDA\n\nCUDA 可以在 [NVIDIA 网站](https://developer.nvidia.com/cuda-downloads) 下载，选择自己相应的选项后，就可以下载了。我这里下载的是 CUDA9.0 的 runfile(local) 。 然后上传到服务器。\n\n#### 3.2.2 安装 cuda\n到之前我们下载的 runfile 文件目录下，运行如下命令：\n```\n$ sudo sh cuda_<version>_linux.run\n```\n进行安装。\n\n安装程序会提示如下内容：\n\n - EULA Acceptance：接受协议即可\n - CUDA Driver installation：如果你已经装好了 nvidia 显卡驱动，这里需要选择 `n` 。注意，你的 nvidia 显卡驱动版本需要适配 CUDA 版本\n - CUDA Toolkit installation，location，and /usr/local/cuda symbolic link：这里全选 `y` 和默认即可\n - CUDA Samples installation and location：这个最好安装一下，后续可以用于验证 CUDA 是否安装正确\n\n安装完成后，重启系统。\n\n#### 3.2.3 安装后\n重启系统后，需要修改环境变量。具体操作如下：\n```\n$ export PATH=/usr/local/cuda-9.0/bin${PATH:+:${PATH}}\n$ export LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64\\\n                         ${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n```\n\n至此，CUDA 安装完毕。接下来我们验证一下 CUDA 是否安装成功。\n\n1. 检查 /dev/ 目录下是否存在以 nvidia* 开头的多个文件\n2. 检查 CUDA Toolkit 是否安装成功\n\n    终端输入 `nvcc -V` 会输出 CUDA 版本信息\n3. 编译 Samples 例子\n\n    进入到 Samples 安装目录，终端输入 `make` 进行编译\n4. 编译完成后测试\n\n    进入 `bin/x86_64/linux/release/` 目录。\n    \n    运行 deviceQuery 程序： `$ sudo ./deviceQuery` ，查看输出结果，最后一行显示 `Result = PASS` 表示通过测试。\n\n    运行 bandwidthTest 程序： `$ sudo ./bandwidthTest`, 查看输出结果，最后一行显示 `Result = PASS` 表示通过测试。\n\n如果以上均没有问题，则说明 CUDA 安装成功。\n\n#### 3.2.4 安装 cudnn\ncudnn 的安装非常简单，只有以下几步：\n\n1. 下载 cudnn 安装包\n\n    前往 [NVIDIA cuDNN home page](https://developer.nvidia.com/cudnn), 注册账号之后，下载 cudnn 压缩包（tgz格式）。注意，win10 操作系统在下载 tgz 格式文件时，会将后缀名转变为 .solita* ，这个文件在 linux 下也能解压，但是会报错，实践证明，解压出的文件也是不能用的，因此，建议在 linux 系统或 mac os 下下载上述压缩包。然后上传到服务器。\n\n2. 解压压缩包\n\n    输入命令：`$ tar -xzvf cudnn-9.0-linux-x64-v7.tgz`，会在当前目录下生成一个 cuda/ 目录。\n\n3. copy 以下文件到 CUDA Toolkit 目录下\n\n    终端输入以下命令：\n    ```\n    $ sudo cp cuda/include/cudnn.h /usr/local/cuda/include\n    $ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\n    $ sudo chmod a+r /usr/local/cuda/include/cudnn.h\n    $ sudo chmod a+r /usr/local/cuda/lib64/libcudnn*\n    ```\n\n经过以上三步，cudnn 也安装好了，接下来只需要安装 tensorflow 了！\n\n\n### 3.3 安装 tensorflow\n最简单的方式当然是使用 pip 进行安装了！\n\n在终端下输入 `pip install tensorflow-gpu==1.5.0` 即可。\n\n注意我们安装的是 gpu 版本，所以一定要是 `tensorflow-gpu`，等号后面代表我们想要安装的 tensorflow 版本。\n\n安装成功后，终端输入 `python` 进入 python 环境，运行以下代码，若运行成功，则说明我们的 tensorflow 环境也就配置成功了！\n\n```python\n>>> import tensorflow\n```\n\n## 4. 总结\n要配置及维护好一个深度学习服务器还有很长的路要走。比如 ACL 文件权限管理系统，用户权限管理，shell script 学习等。\n\n我这里记录的内容，能够让服务器实现多用户深度学习开发，能对于现在的实验室已经够用了，之后后面的内容，如果有需要会继续学习。\n\n以上内容，最耗费时间的就是 CUDA 和 cudnn 环境的配置了。刚开始偷懒，想跟着中文博客去安装，后来看了数十篇博客，中间碰到各种问题又不断 Google ，解决了一个问题又出现新的问题，真的非常心累。 后来跟着 NVIDIA 的官网教程，重新安装了一遍，总算是成功了。\n\n这让我明白，无论是学习新东西也好，使用一个新工具也好，最好的资料一定是官方编写的。网上铺天盖地的博客，无非是对论文或者官方教程的二次加工。所以一定不要偷懒，耐着性子去琢磨英文版的官方教程，一定是没有问题的！\n\n我这篇博客其实是对我配置深度学习服务器的梳理，也是对查找的各种资料的总结和对官方教程的二次加工。前面的内容应该很好配置。 如果 CUDA 或 cudnn 的安装出了问题，建议仔细研读 NVIDIA 的官方教程。\n\n[Installation Guide Linux :: CUDA Toolkit Documentation](https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html)\n\n[cuDNN Installation Guide :: Deep Learning SDK Documentation](https://docs.nvidia.com/deeplearning/sdk/cudnn-install/)","source":"_posts/服务器配置指南.md","raw":"---\ntitle: 深度学习服务器完整配置指南\ntags: ML \n---\n\n<!-- more -->\n\n最近实验室配了一台深度学习服务器，服务器刚到时基本上只装了 ubuntu 操作系统，所以我也基本上是算从头配置了一台深度学习服务器。现将配置过程记录于此，以便帮助他人和方便交流。\n\n首先，我的深度学习服务器的配置为：\n - ubuntu 14.04 操作系统，16.04 应该也是一样的\n - Anaconda3 集成的 python 环境，使用 conda 进行虚拟环境管理\n - jupyterhub 提供的 jupyter notebook 功能\n - cuda 9.0 + cudnn 7.1 + tensorflow 1.5.0\n\n有了以上配置或环境，服务器就非常好用了。无论是用户虚拟环境管理，还是使用 jupyter notebook 都非常方便。\n\n好了，接下来开始逐个介绍。\n\n## 1. 网络配置\n服务器刚到，第一步就是要进行网络配置。网络配置好之后，就可以将服务器放入机房，不用再忍受噪音，进行远程操作了。我这里的服务器是接入的校园网，因此也只介绍校园网下的网络配置，其他情况的同学需要去查一下资料配置。\n\n### 1.1 接入校园网\n首先，使用网线介入校园网，打通物理层面。注意不要接错网口，我之前因为接错网口，导致花了半下午时间找问题，可以说是很尴尬了。\n\n接下来，使用 `ifconfig` 命令来查看网卡类型，`eth0` or `em1` 这种，我这里是 `em1`。然后修改 `/etc/network/interfaces` 如下：\n```python\n# This file describes the network interfaces available on your system\n# and how to activate them. For more information, see interfaces(5).\n# The loopback network interface\nauto lo\niface lo inet loopback\n# The primary network interface\nauto em1\n#iface em1 inet dhcp\niface em1 inet static\naddress xx.xx.xx.xx\nnetmask xxx.xxx.xxx.0\ngateway xx.xx.xx.xxx\ndns-nameservers xx.xx.x.xx\n```\n上面的配置其实就是给服务器设置一个静态 ip ，我们可以通过这个静态 ip 访问该服务器。然后配置网管，DNS 服务器什么的。和 windows 下配置类似，实验室用过有线的应该都懂。\n\n配置好之后，就可以连接内网了。使用 `ping 10.xx.xxx.xxx（你的校园网内网 ip 地址）` 来检查是否能连内网。\n\n注意，我这里记录的是我们学校的校园网接入方式，我不清楚不同学校的校园网接入方式是否相同，需要大家搞清楚。\n\n### 1.2 镜像源配置\n#### 1.2.1 更改 apt-get 镜像源\n将服务器只放在校园网环境下，这样做有两个好处：\n\n1. 安全\n2. 校园网速度非常快\n\n但很明显，如果只连校园网，我们将无法下载日常使用的软件或者包。但还好，这个问题很好解决，只需要修改镜像源即可。\n\n我们在使用 `apt-get install` 命令时，会向外网发送请求，下载我们需要的软件。而修改镜像源之后，则会转而向我们指定的网站发送请求。这里我们使用的是清华的镜像源，清华的镜像源使用校园网内网即可访问，非常适合我们这种校园网的服务器。\n\n首先，把 `/etc/apt/source.list` 文件备份，然后将 `source.list` 的内容修改如下（具体内容和 linux 发行版本有关，具体见 [Ubuntu 镜像使用帮助](https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/)）：\n\n```python\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-security main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-security main restricted universe multiverse\n# 预发布软件源，不建议启用\n# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-proposed main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-proposed main restricted universe multiverse\n```\n\n然后就可以在内网下使用 `apt-get install` 命令了。\n\n### 1.2.2 更改 pip 和 conda 源\n使用 pip 或者 conda 安装 python 模块非常方便，但是我们只接入了校园网，所以需要更改一下 pip 和 anaconda 的源。\n\npip 更改方式如下：\n修改 ~/.pip/pip.conf（没有就创建一个），内容如下：\n```python\n [global]\n index-url = https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\nconda 更改方式如下：\n```python\n# 命令行输入如下命令\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --set show_channel_urls yes\n```\n\n修改之后，可以测试一下速度，我这里能上 `10M/s`，还是非常快的。\n\n### 1.2.3 外网访问\n如果是在需要访问外网，可以使用 vpn 连接到外网。我这里使用的是校内流传的一个软件，不同学校不同。\n\n使用 `sudo dpkg -i xl2tpd_1.2.5%2Bzju-1_amd64.deb` 安装之后，按照下面方式配置：\n```python\n# 配置用户名和密码\n$ sudo vpn-connect -c\nConfigure L2TP VPN for ZJU.\n# 这里的Username是你的学号，后面的@代表你是10/30/50包月。\nUsername: 216....@10\nPassword: 你的密码\n# 配置完成，使用这个命令开启连接\n$ sudo vpn-connect\n#连接成功，可以ping一下百度，看是否能连外网了\n$ ping www.baidu.com\n# 重连，断开等，可以使用下面的命令查看\n$ vpn-connect -h\n```\n\n以上，基本上就是网络配置的内容了。以上配置好后，基本上就够一个服务器使用了，毕竟，作为计算型服务器，平时使用最多的也就是使用 ssh 远程访问和使用 pip 了。\n\n## 2. 环境配置\n这一节主要介绍下 python 环境配置。由于服务器需要多用户使用，因此虚拟环境必不可少。每个用户都使用自身的 python 虚拟环境，可以避免模块版本冲突等问题。此外，jupyter notebook 作为一个方便的 python 交互式环境，能在客户端使用它并且支持多用户使用，也是需要进行配置的。\n\n### 2.1 python 虚拟环境\npython 环境我们使用 Anaconda 进行配置。Anaconda 集成了 python 环境和常用的模块，可以帮我们省很多功夫。\n\n使用 `sudo apt-get install anaconda3` 安装 Anaconda3。也可以去网上下载 anaconda3 的安装包，上传到服务器之后进行安装。Anyway，只要能够成功安装就行，这一步很简单。\n\n之后，可以在命令行输入`python` 和 `conda` 来查看是否安装成功。\n\n最后需要修改全局变量，因为此时，只有 root 用户能够使用该环境，其他用户无法正常使用。修改方式如下：\n```python\necho 'PATH=/usr/lib/anaconda/bin:$PATH' >> /etc/profile.d/anaconda.sh\nsource /etc/profile\n```\n这样，所有用户都可以使用 Anaconda 了，也可以使用 conda 建立虚拟环境了。\n\n建议在使用服务器进行开发时，每位用户都在自己的 python 虚拟环境下进行开发，不要在全局安装 python 的包和库。建立虚拟环境的方式如下：\n```python\nlist all env:\n    conda info --env\ncreate a simple virtual env:\n    conda create -n MyEnvName python=3*\ndelete virtual env:\n    conda env remove -n MyEnvName\n```\n建立完成后，使用 `source activate MyEnvName` 进入虚拟环境，使用 `source deactivate` 推出虚拟环境。\n\n需要注意的是，在自己的虚拟环境下，使用 pip 安装 python 模块，还是安装到全局中的，需要使用 `conda -n myEnv install pip` 或者在虚拟环境下使用 `conda install pip` 来安装虚拟环境中的pip，这样在虚拟环境中使用pip就能将包安装到虚拟环境中了。\n\n### 2.2 jupyter notebook 配置\n在服务器开启 jupyter notebook 服务，可以在客户端使用浏览器登陆服务器的 jupyter notebook，但是如果多用户同时使用，就需要每个用户都进行配置然后开启服务，非常麻烦。\n\nJupyterhub 是一组进程，使用 JupyterHub 可以为组中的每个人分别提供单个用户的 Jupyter Notebook 服务器。具体使用方式见[JupyterHub](https://jupyterhub.readthedocs.io/en/0.7.0/quickstart.html)。\n\n## 3. 深度学习环境：cuda9.0 + cudnn7.1 + tensorflow 1.5.0\n我安装深度学习环境主要是为了使用 tensorflow, 但不同版本的 tensorflow 需要安装不同版本的 cuda ，所以需要先明确自己使用的 tensorflow 版本。我要使用 tensorflow 1.5.0 ，所以选择安装 cuda9.0 + cudnn7.1。\n\n### 3.1 什么是 cuda 和 cudnn\nCUDA 是由 NVIDIA 推出的一种集成技术，用于 GPU 的并行计算。\n\nCUDA 的作用，是与通用程序对接。比如，我们使用 python 写的程序，将数据和运算逻辑准备好之后，需要调用 CUDA 库提供的函数来传递给 CUDA，CUDA 再调用显卡驱动对 CUDA 程序进行编译，然后再将编译好的程序和数据传送给 GPU 进行运算。\n\n而 cuDNN 是用于深度神经网络的 GPU 加速计算库。它可以将卷积神经网路的计算变换为对 GPU 更友好的矩阵运算，可以有效提高整个网络的训练速度。\n\n要使用 tensorflow 的 GPU 版本，我们需要安装 CUDA 和 cuDNN。\n\n### 3.2 安装 cuda9.0 + cudnn7.1\n#### 3.2.1 安装前\n1. 首先，确保你的电脑上有 CUDA 支持的 GPU 硬件。\n\n在终端下，输入 `lspci | grep -i nvidia` 来查看。如果有 GPU 安装，会显示结果。\n\n2. 确保系统中安装了 gcc\n\n使用 `gcc --version` 来查看 gcc 版本，确保系统中已经安装了 gcc 。\n\n3. 验证系统是否安装了正确的内核头文件和开发包\n\n使用 `uname -r` 来查看系统的核版本。\n使用 `$ sudo apt-get install linux-headers-$(uname -r)` 来安装当前正在运行的内核的内核头文件和开发包。\n\n4. 下载 CUDA\n\nCUDA 可以在 [NVIDIA 网站](https://developer.nvidia.com/cuda-downloads) 下载，选择自己相应的选项后，就可以下载了。我这里下载的是 CUDA9.0 的 runfile(local) 。 然后上传到服务器。\n\n#### 3.2.2 安装 cuda\n到之前我们下载的 runfile 文件目录下，运行如下命令：\n```\n$ sudo sh cuda_<version>_linux.run\n```\n进行安装。\n\n安装程序会提示如下内容：\n\n - EULA Acceptance：接受协议即可\n - CUDA Driver installation：如果你已经装好了 nvidia 显卡驱动，这里需要选择 `n` 。注意，你的 nvidia 显卡驱动版本需要适配 CUDA 版本\n - CUDA Toolkit installation，location，and /usr/local/cuda symbolic link：这里全选 `y` 和默认即可\n - CUDA Samples installation and location：这个最好安装一下，后续可以用于验证 CUDA 是否安装正确\n\n安装完成后，重启系统。\n\n#### 3.2.3 安装后\n重启系统后，需要修改环境变量。具体操作如下：\n```\n$ export PATH=/usr/local/cuda-9.0/bin${PATH:+:${PATH}}\n$ export LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64\\\n                         ${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n```\n\n至此，CUDA 安装完毕。接下来我们验证一下 CUDA 是否安装成功。\n\n1. 检查 /dev/ 目录下是否存在以 nvidia* 开头的多个文件\n2. 检查 CUDA Toolkit 是否安装成功\n\n    终端输入 `nvcc -V` 会输出 CUDA 版本信息\n3. 编译 Samples 例子\n\n    进入到 Samples 安装目录，终端输入 `make` 进行编译\n4. 编译完成后测试\n\n    进入 `bin/x86_64/linux/release/` 目录。\n    \n    运行 deviceQuery 程序： `$ sudo ./deviceQuery` ，查看输出结果，最后一行显示 `Result = PASS` 表示通过测试。\n\n    运行 bandwidthTest 程序： `$ sudo ./bandwidthTest`, 查看输出结果，最后一行显示 `Result = PASS` 表示通过测试。\n\n如果以上均没有问题，则说明 CUDA 安装成功。\n\n#### 3.2.4 安装 cudnn\ncudnn 的安装非常简单，只有以下几步：\n\n1. 下载 cudnn 安装包\n\n    前往 [NVIDIA cuDNN home page](https://developer.nvidia.com/cudnn), 注册账号之后，下载 cudnn 压缩包（tgz格式）。注意，win10 操作系统在下载 tgz 格式文件时，会将后缀名转变为 .solita* ，这个文件在 linux 下也能解压，但是会报错，实践证明，解压出的文件也是不能用的，因此，建议在 linux 系统或 mac os 下下载上述压缩包。然后上传到服务器。\n\n2. 解压压缩包\n\n    输入命令：`$ tar -xzvf cudnn-9.0-linux-x64-v7.tgz`，会在当前目录下生成一个 cuda/ 目录。\n\n3. copy 以下文件到 CUDA Toolkit 目录下\n\n    终端输入以下命令：\n    ```\n    $ sudo cp cuda/include/cudnn.h /usr/local/cuda/include\n    $ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\n    $ sudo chmod a+r /usr/local/cuda/include/cudnn.h\n    $ sudo chmod a+r /usr/local/cuda/lib64/libcudnn*\n    ```\n\n经过以上三步，cudnn 也安装好了，接下来只需要安装 tensorflow 了！\n\n\n### 3.3 安装 tensorflow\n最简单的方式当然是使用 pip 进行安装了！\n\n在终端下输入 `pip install tensorflow-gpu==1.5.0` 即可。\n\n注意我们安装的是 gpu 版本，所以一定要是 `tensorflow-gpu`，等号后面代表我们想要安装的 tensorflow 版本。\n\n安装成功后，终端输入 `python` 进入 python 环境，运行以下代码，若运行成功，则说明我们的 tensorflow 环境也就配置成功了！\n\n```python\n>>> import tensorflow\n```\n\n## 4. 总结\n要配置及维护好一个深度学习服务器还有很长的路要走。比如 ACL 文件权限管理系统，用户权限管理，shell script 学习等。\n\n我这里记录的内容，能够让服务器实现多用户深度学习开发，能对于现在的实验室已经够用了，之后后面的内容，如果有需要会继续学习。\n\n以上内容，最耗费时间的就是 CUDA 和 cudnn 环境的配置了。刚开始偷懒，想跟着中文博客去安装，后来看了数十篇博客，中间碰到各种问题又不断 Google ，解决了一个问题又出现新的问题，真的非常心累。 后来跟着 NVIDIA 的官网教程，重新安装了一遍，总算是成功了。\n\n这让我明白，无论是学习新东西也好，使用一个新工具也好，最好的资料一定是官方编写的。网上铺天盖地的博客，无非是对论文或者官方教程的二次加工。所以一定不要偷懒，耐着性子去琢磨英文版的官方教程，一定是没有问题的！\n\n我这篇博客其实是对我配置深度学习服务器的梳理，也是对查找的各种资料的总结和对官方教程的二次加工。前面的内容应该很好配置。 如果 CUDA 或 cudnn 的安装出了问题，建议仔细研读 NVIDIA 的官方教程。\n\n[Installation Guide Linux :: CUDA Toolkit Documentation](https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html)\n\n[cuDNN Installation Guide :: Deep Learning SDK Documentation](https://docs.nvidia.com/deeplearning/sdk/cudnn-install/)","slug":"服务器配置指南","published":1,"date":"2018-05-20T06:32:39.876Z","updated":"2018-05-20T13:19:04.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqw6heiq0003gsujl1ktyr2g","content":"<a id=\"more\"></a>\n<p>最近实验室配了一台深度学习服务器，服务器刚到时基本上只装了 ubuntu 操作系统，所以我也基本上是算从头配置了一台深度学习服务器。现将配置过程记录于此，以便帮助他人和方便交流。</p>\n<p>首先，我的深度学习服务器的配置为：</p>\n<ul>\n<li>ubuntu 14.04 操作系统，16.04 应该也是一样的</li>\n<li>Anaconda3 集成的 python 环境，使用 conda 进行虚拟环境管理</li>\n<li>jupyterhub 提供的 jupyter notebook 功能</li>\n<li>cuda 9.0 + cudnn 7.1 + tensorflow 1.5.0</li>\n</ul>\n<p>有了以上配置或环境，服务器就非常好用了。无论是用户虚拟环境管理，还是使用 jupyter notebook 都非常方便。</p>\n<p>好了，接下来开始逐个介绍。</p>\n<h2 id=\"1-网络配置\"><a href=\"#1-网络配置\" class=\"headerlink\" title=\"1. 网络配置\"></a>1. 网络配置</h2><p>服务器刚到，第一步就是要进行网络配置。网络配置好之后，就可以将服务器放入机房，不用再忍受噪音，进行远程操作了。我这里的服务器是接入的校园网，因此也只介绍校园网下的网络配置，其他情况的同学需要去查一下资料配置。</p>\n<h3 id=\"1-1-接入校园网\"><a href=\"#1-1-接入校园网\" class=\"headerlink\" title=\"1.1 接入校园网\"></a>1.1 接入校园网</h3><p>首先，使用网线介入校园网，打通物理层面。注意不要接错网口，我之前因为接错网口，导致花了半下午时间找问题，可以说是很尴尬了。</p>\n<p>接下来，使用 <code>ifconfig</code> 命令来查看网卡类型，<code>eth0</code> or <code>em1</code> 这种，我这里是 <code>em1</code>。然后修改 <code>/etc/network/interfaces</code> 如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This file describes the network interfaces available on your system</span></span><br><span class=\"line\"><span class=\"comment\"># and how to activate them. For more information, see interfaces(5).</span></span><br><span class=\"line\"><span class=\"comment\"># The loopback network interface</span></span><br><span class=\"line\">auto lo</span><br><span class=\"line\">iface lo inet loopback</span><br><span class=\"line\"><span class=\"comment\"># The primary network interface</span></span><br><span class=\"line\">auto em1</span><br><span class=\"line\"><span class=\"comment\">#iface em1 inet dhcp</span></span><br><span class=\"line\">iface em1 inet static</span><br><span class=\"line\">address xx.xx.xx.xx</span><br><span class=\"line\">netmask xxx.xxx.xxx<span class=\"number\">.0</span></span><br><span class=\"line\">gateway xx.xx.xx.xxx</span><br><span class=\"line\">dns-nameservers xx.xx.x.xx</span><br></pre></td></tr></table></figure></p>\n<p>上面的配置其实就是给服务器设置一个静态 ip ，我们可以通过这个静态 ip 访问该服务器。然后配置网管，DNS 服务器什么的。和 windows 下配置类似，实验室用过有线的应该都懂。</p>\n<p>配置好之后，就可以连接内网了。使用 <code>ping 10.xx.xxx.xxx（你的校园网内网 ip 地址）</code> 来检查是否能连内网。</p>\n<p>注意，我这里记录的是我们学校的校园网接入方式，我不清楚不同学校的校园网接入方式是否相同，需要大家搞清楚。</p>\n<h3 id=\"1-2-镜像源配置\"><a href=\"#1-2-镜像源配置\" class=\"headerlink\" title=\"1.2 镜像源配置\"></a>1.2 镜像源配置</h3><h4 id=\"1-2-1-更改-apt-get-镜像源\"><a href=\"#1-2-1-更改-apt-get-镜像源\" class=\"headerlink\" title=\"1.2.1 更改 apt-get 镜像源\"></a>1.2.1 更改 apt-get 镜像源</h4><p>将服务器只放在校园网环境下，这样做有两个好处：</p>\n<ol>\n<li>安全</li>\n<li>校园网速度非常快</li>\n</ol>\n<p>但很明显，如果只连校园网，我们将无法下载日常使用的软件或者包。但还好，这个问题很好解决，只需要修改镜像源即可。</p>\n<p>我们在使用 <code>apt-get install</code> 命令时，会向外网发送请求，下载我们需要的软件。而修改镜像源之后，则会转而向我们指定的网站发送请求。这里我们使用的是清华的镜像源，清华的镜像源使用校园网内网即可访问，非常适合我们这种校园网的服务器。</p>\n<p>首先，把 <code>/etc/apt/source.list</code> 文件备份，然后将 <code>source.list</code> 的内容修改如下（具体内容和 linux 发行版本有关，具体见 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/\" target=\"_blank\" rel=\"noopener\">Ubuntu 镜像使用帮助</a>）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main restricted universe multiverse</span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main restricted universe multiverse</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-security main restricted universe multiverse</span></span><br><span class=\"line\"><span class=\"comment\"># 预发布软件源，不建议启用</span></span><br><span class=\"line\"><span class=\"comment\"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-proposed main restricted universe multiverse</span></span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>\n<p>然后就可以在内网下使用 <code>apt-get install</code> 命令了。</p>\n<h3 id=\"1-2-2-更改-pip-和-conda-源\"><a href=\"#1-2-2-更改-pip-和-conda-源\" class=\"headerlink\" title=\"1.2.2 更改 pip 和 conda 源\"></a>1.2.2 更改 pip 和 conda 源</h3><p>使用 pip 或者 conda 安装 python 模块非常方便，但是我们只接入了校园网，所以需要更改一下 pip 和 anaconda 的源。</p>\n<p>pip 更改方式如下：<br>修改 ~/.pip/pip.conf（没有就创建一个），内容如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">global</span>]</span><br><span class=\"line\">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p>\n<p>conda 更改方式如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 命令行输入如下命令</span></span><br><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure></p>\n<p>修改之后，可以测试一下速度，我这里能上 <code>10M/s</code>，还是非常快的。</p>\n<h3 id=\"1-2-3-外网访问\"><a href=\"#1-2-3-外网访问\" class=\"headerlink\" title=\"1.2.3 外网访问\"></a>1.2.3 外网访问</h3><p>如果是在需要访问外网，可以使用 vpn 连接到外网。我这里使用的是校内流传的一个软件，不同学校不同。</p>\n<p>使用 <code>sudo dpkg -i xl2tpd_1.2.5%2Bzju-1_amd64.deb</code> 安装之后，按照下面方式配置：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置用户名和密码</span></span><br><span class=\"line\">$ sudo vpn-connect -c</span><br><span class=\"line\">Configure L2TP VPN <span class=\"keyword\">for</span> ZJU.</span><br><span class=\"line\"><span class=\"comment\"># 这里的Username是你的学号，后面的@代表你是10/30/50包月。</span></span><br><span class=\"line\">Username: <span class=\"number\">216.</span>...@<span class=\"number\">10</span></span><br><span class=\"line\">Password: 你的密码</span><br><span class=\"line\"><span class=\"comment\"># 配置完成，使用这个命令开启连接</span></span><br><span class=\"line\">$ sudo vpn-connect</span><br><span class=\"line\"><span class=\"comment\">#连接成功，可以ping一下百度，看是否能连外网了</span></span><br><span class=\"line\">$ ping www.baidu.com</span><br><span class=\"line\"><span class=\"comment\"># 重连，断开等，可以使用下面的命令查看</span></span><br><span class=\"line\">$ vpn-connect -h</span><br></pre></td></tr></table></figure></p>\n<p>以上，基本上就是网络配置的内容了。以上配置好后，基本上就够一个服务器使用了，毕竟，作为计算型服务器，平时使用最多的也就是使用 ssh 远程访问和使用 pip 了。</p>\n<h2 id=\"2-环境配置\"><a href=\"#2-环境配置\" class=\"headerlink\" title=\"2. 环境配置\"></a>2. 环境配置</h2><p>这一节主要介绍下 python 环境配置。由于服务器需要多用户使用，因此虚拟环境必不可少。每个用户都使用自身的 python 虚拟环境，可以避免模块版本冲突等问题。此外，jupyter notebook 作为一个方便的 python 交互式环境，能在客户端使用它并且支持多用户使用，也是需要进行配置的。</p>\n<h3 id=\"2-1-python-虚拟环境\"><a href=\"#2-1-python-虚拟环境\" class=\"headerlink\" title=\"2.1 python 虚拟环境\"></a>2.1 python 虚拟环境</h3><p>python 环境我们使用 Anaconda 进行配置。Anaconda 集成了 python 环境和常用的模块，可以帮我们省很多功夫。</p>\n<p>使用 <code>sudo apt-get install anaconda3</code> 安装 Anaconda3。也可以去网上下载 anaconda3 的安装包，上传到服务器之后进行安装。Anyway，只要能够成功安装就行，这一步很简单。</p>\n<p>之后，可以在命令行输入<code>python</code> 和 <code>conda</code> 来查看是否安装成功。</p>\n<p>最后需要修改全局变量，因为此时，只有 root 用户能够使用该环境，其他用户无法正常使用。修改方式如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo <span class=\"string\">'PATH=/usr/lib/anaconda/bin:$PATH'</span> &gt;&gt; /etc/profile.d/anaconda.sh</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></p>\n<p>这样，所有用户都可以使用 Anaconda 了，也可以使用 conda 建立虚拟环境了。</p>\n<p>建议在使用服务器进行开发时，每位用户都在自己的 python 虚拟环境下进行开发，不要在全局安装 python 的包和库。建立虚拟环境的方式如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list all env:</span><br><span class=\"line\">    conda info --env</span><br><span class=\"line\">create a simple virtual env:</span><br><span class=\"line\">    conda create -n MyEnvName python=<span class=\"number\">3</span>*</span><br><span class=\"line\">delete virtual env:</span><br><span class=\"line\">    conda env remove -n MyEnvName</span><br></pre></td></tr></table></figure></p>\n<p>建立完成后，使用 <code>source activate MyEnvName</code> 进入虚拟环境，使用 <code>source deactivate</code> 推出虚拟环境。</p>\n<p>需要注意的是，在自己的虚拟环境下，使用 pip 安装 python 模块，还是安装到全局中的，需要使用 <code>conda -n myEnv install pip</code> 或者在虚拟环境下使用 <code>conda install pip</code> 来安装虚拟环境中的pip，这样在虚拟环境中使用pip就能将包安装到虚拟环境中了。</p>\n<h3 id=\"2-2-jupyter-notebook-配置\"><a href=\"#2-2-jupyter-notebook-配置\" class=\"headerlink\" title=\"2.2 jupyter notebook 配置\"></a>2.2 jupyter notebook 配置</h3><p>在服务器开启 jupyter notebook 服务，可以在客户端使用浏览器登陆服务器的 jupyter notebook，但是如果多用户同时使用，就需要每个用户都进行配置然后开启服务，非常麻烦。</p>\n<p>Jupyterhub 是一组进程，使用 JupyterHub 可以为组中的每个人分别提供单个用户的 Jupyter Notebook 服务器。具体使用方式见<a href=\"https://jupyterhub.readthedocs.io/en/0.7.0/quickstart.html\" target=\"_blank\" rel=\"noopener\">JupyterHub</a>。</p>\n<h2 id=\"3-深度学习环境：cuda9-0-cudnn7-1-tensorflow-1-5-0\"><a href=\"#3-深度学习环境：cuda9-0-cudnn7-1-tensorflow-1-5-0\" class=\"headerlink\" title=\"3. 深度学习环境：cuda9.0 + cudnn7.1 + tensorflow 1.5.0\"></a>3. 深度学习环境：cuda9.0 + cudnn7.1 + tensorflow 1.5.0</h2><p>我安装深度学习环境主要是为了使用 tensorflow, 但不同版本的 tensorflow 需要安装不同版本的 cuda ，所以需要先明确自己使用的 tensorflow 版本。我要使用 tensorflow 1.5.0 ，所以选择安装 cuda9.0 + cudnn7.1。</p>\n<h3 id=\"3-1-什么是-cuda-和-cudnn\"><a href=\"#3-1-什么是-cuda-和-cudnn\" class=\"headerlink\" title=\"3.1 什么是 cuda 和 cudnn\"></a>3.1 什么是 cuda 和 cudnn</h3><p>CUDA 是由 NVIDIA 推出的一种集成技术，用于 GPU 的并行计算。</p>\n<p>CUDA 的作用，是与通用程序对接。比如，我们使用 python 写的程序，将数据和运算逻辑准备好之后，需要调用 CUDA 库提供的函数来传递给 CUDA，CUDA 再调用显卡驱动对 CUDA 程序进行编译，然后再将编译好的程序和数据传送给 GPU 进行运算。</p>\n<p>而 cuDNN 是用于深度神经网络的 GPU 加速计算库。它可以将卷积神经网路的计算变换为对 GPU 更友好的矩阵运算，可以有效提高整个网络的训练速度。</p>\n<p>要使用 tensorflow 的 GPU 版本，我们需要安装 CUDA 和 cuDNN。</p>\n<h3 id=\"3-2-安装-cuda9-0-cudnn7-1\"><a href=\"#3-2-安装-cuda9-0-cudnn7-1\" class=\"headerlink\" title=\"3.2 安装 cuda9.0 + cudnn7.1\"></a>3.2 安装 cuda9.0 + cudnn7.1</h3><h4 id=\"3-2-1-安装前\"><a href=\"#3-2-1-安装前\" class=\"headerlink\" title=\"3.2.1 安装前\"></a>3.2.1 安装前</h4><ol>\n<li>首先，确保你的电脑上有 CUDA 支持的 GPU 硬件。</li>\n</ol>\n<p>在终端下，输入 <code>lspci | grep -i nvidia</code> 来查看。如果有 GPU 安装，会显示结果。</p>\n<ol>\n<li>确保系统中安装了 gcc</li>\n</ol>\n<p>使用 <code>gcc --version</code> 来查看 gcc 版本，确保系统中已经安装了 gcc 。</p>\n<ol>\n<li>验证系统是否安装了正确的内核头文件和开发包</li>\n</ol>\n<p>使用 <code>uname -r</code> 来查看系统的核版本。<br>使用 <code>$ sudo apt-get install linux-headers-$(uname -r)</code> 来安装当前正在运行的内核的内核头文件和开发包。</p>\n<ol>\n<li>下载 CUDA</li>\n</ol>\n<p>CUDA 可以在 <a href=\"https://developer.nvidia.com/cuda-downloads\" target=\"_blank\" rel=\"noopener\">NVIDIA 网站</a> 下载，选择自己相应的选项后，就可以下载了。我这里下载的是 CUDA9.0 的 runfile(local) 。 然后上传到服务器。</p>\n<h4 id=\"3-2-2-安装-cuda\"><a href=\"#3-2-2-安装-cuda\" class=\"headerlink\" title=\"3.2.2 安装 cuda\"></a>3.2.2 安装 cuda</h4><p>到之前我们下载的 runfile 文件目录下，运行如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo sh cuda_&lt;version&gt;_linux.run</span><br></pre></td></tr></table></figure></p>\n<p>进行安装。</p>\n<p>安装程序会提示如下内容：</p>\n<ul>\n<li>EULA Acceptance：接受协议即可</li>\n<li>CUDA Driver installation：如果你已经装好了 nvidia 显卡驱动，这里需要选择 <code>n</code> 。注意，你的 nvidia 显卡驱动版本需要适配 CUDA 版本</li>\n<li>CUDA Toolkit installation，location，and /usr/local/cuda symbolic link：这里全选 <code>y</code> 和默认即可</li>\n<li>CUDA Samples installation and location：这个最好安装一下，后续可以用于验证 CUDA 是否安装正确</li>\n</ul>\n<p>安装完成后，重启系统。</p>\n<h4 id=\"3-2-3-安装后\"><a href=\"#3-2-3-安装后\" class=\"headerlink\" title=\"3.2.3 安装后\"></a>3.2.3 安装后</h4><p>重启系统后，需要修改环境变量。具体操作如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ export PATH=/usr/local/cuda-9.0/bin$&#123;PATH:+:$&#123;PATH&#125;&#125;</span><br><span class=\"line\">$ export LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64\\</span><br><span class=\"line\">                         $&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>至此，CUDA 安装完毕。接下来我们验证一下 CUDA 是否安装成功。</p>\n<ol>\n<li>检查 /dev/ 目录下是否存在以 nvidia* 开头的多个文件</li>\n<li><p>检查 CUDA Toolkit 是否安装成功</p>\n<p> 终端输入 <code>nvcc -V</code> 会输出 CUDA 版本信息</p>\n</li>\n<li><p>编译 Samples 例子</p>\n<p> 进入到 Samples 安装目录，终端输入 <code>make</code> 进行编译</p>\n</li>\n<li><p>编译完成后测试</p>\n<p> 进入 <code>bin/x86_64/linux/release/</code> 目录。</p>\n<p> 运行 deviceQuery 程序： <code>$ sudo ./deviceQuery</code> ，查看输出结果，最后一行显示 <code>Result = PASS</code> 表示通过测试。</p>\n<p> 运行 bandwidthTest 程序： <code>$ sudo ./bandwidthTest</code>, 查看输出结果，最后一行显示 <code>Result = PASS</code> 表示通过测试。</p>\n</li>\n</ol>\n<p>如果以上均没有问题，则说明 CUDA 安装成功。</p>\n<h4 id=\"3-2-4-安装-cudnn\"><a href=\"#3-2-4-安装-cudnn\" class=\"headerlink\" title=\"3.2.4 安装 cudnn\"></a>3.2.4 安装 cudnn</h4><p>cudnn 的安装非常简单，只有以下几步：</p>\n<ol>\n<li><p>下载 cudnn 安装包</p>\n<p> 前往 <a href=\"https://developer.nvidia.com/cudnn\" target=\"_blank\" rel=\"noopener\">NVIDIA cuDNN home page</a>, 注册账号之后，下载 cudnn 压缩包（tgz格式）。注意，win10 操作系统在下载 tgz 格式文件时，会将后缀名转变为 .solita* ，这个文件在 linux 下也能解压，但是会报错，实践证明，解压出的文件也是不能用的，因此，建议在 linux 系统或 mac os 下下载上述压缩包。然后上传到服务器。</p>\n</li>\n<li><p>解压压缩包</p>\n<p> 输入命令：<code>$ tar -xzvf cudnn-9.0-linux-x64-v7.tgz</code>，会在当前目录下生成一个 cuda/ 目录。</p>\n</li>\n<li><p>copy 以下文件到 CUDA Toolkit 目录下</p>\n<p> 终端输入以下命令：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo cp cuda/include/cudnn.h /usr/local/cuda/include</span><br><span class=\"line\">$ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64</span><br><span class=\"line\">$ sudo chmod a+r /usr/local/cuda/include/cudnn.h</span><br><span class=\"line\">$ sudo chmod a+r /usr/local/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>经过以上三步，cudnn 也安装好了，接下来只需要安装 tensorflow 了！</p>\n<h3 id=\"3-3-安装-tensorflow\"><a href=\"#3-3-安装-tensorflow\" class=\"headerlink\" title=\"3.3 安装 tensorflow\"></a>3.3 安装 tensorflow</h3><p>最简单的方式当然是使用 pip 进行安装了！</p>\n<p>在终端下输入 <code>pip install tensorflow-gpu==1.5.0</code> 即可。</p>\n<p>注意我们安装的是 gpu 版本，所以一定要是 <code>tensorflow-gpu</code>，等号后面代表我们想要安装的 tensorflow 版本。</p>\n<p>安装成功后，终端输入 <code>python</code> 进入 python 环境，运行以下代码，若运行成功，则说明我们的 tensorflow 环境也就配置成功了！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> tensorflow</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p>要配置及维护好一个深度学习服务器还有很长的路要走。比如 ACL 文件权限管理系统，用户权限管理，shell script 学习等。</p>\n<p>我这里记录的内容，能够让服务器实现多用户深度学习开发，能对于现在的实验室已经够用了，之后后面的内容，如果有需要会继续学习。</p>\n<p>以上内容，最耗费时间的就是 CUDA 和 cudnn 环境的配置了。刚开始偷懒，想跟着中文博客去安装，后来看了数十篇博客，中间碰到各种问题又不断 Google ，解决了一个问题又出现新的问题，真的非常心累。 后来跟着 NVIDIA 的官网教程，重新安装了一遍，总算是成功了。</p>\n<p>这让我明白，无论是学习新东西也好，使用一个新工具也好，最好的资料一定是官方编写的。网上铺天盖地的博客，无非是对论文或者官方教程的二次加工。所以一定不要偷懒，耐着性子去琢磨英文版的官方教程，一定是没有问题的！</p>\n<p>我这篇博客其实是对我配置深度学习服务器的梳理，也是对查找的各种资料的总结和对官方教程的二次加工。前面的内容应该很好配置。 如果 CUDA 或 cudnn 的安装出了问题，建议仔细研读 NVIDIA 的官方教程。</p>\n<p><a href=\"https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html\" target=\"_blank\" rel=\"noopener\">Installation Guide Linux :: CUDA Toolkit Documentation</a></p>\n<p><a href=\"https://docs.nvidia.com/deeplearning/sdk/cudnn-install/\" target=\"_blank\" rel=\"noopener\">cuDNN Installation Guide :: Deep Learning SDK Documentation</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近实验室配了一台深度学习服务器，服务器刚到时基本上只装了 ubuntu 操作系统，所以我也基本上是算从头配置了一台深度学习服务器。现将配置过程记录于此，以便帮助他人和方便交流。</p>\n<p>首先，我的深度学习服务器的配置为：</p>\n<ul>\n<li>ubuntu 14.04 操作系统，16.04 应该也是一样的</li>\n<li>Anaconda3 集成的 python 环境，使用 conda 进行虚拟环境管理</li>\n<li>jupyterhub 提供的 jupyter notebook 功能</li>\n<li>cuda 9.0 + cudnn 7.1 + tensorflow 1.5.0</li>\n</ul>\n<p>有了以上配置或环境，服务器就非常好用了。无论是用户虚拟环境管理，还是使用 jupyter notebook 都非常方便。</p>\n<p>好了，接下来开始逐个介绍。</p>\n<h2 id=\"1-网络配置\"><a href=\"#1-网络配置\" class=\"headerlink\" title=\"1. 网络配置\"></a>1. 网络配置</h2><p>服务器刚到，第一步就是要进行网络配置。网络配置好之后，就可以将服务器放入机房，不用再忍受噪音，进行远程操作了。我这里的服务器是接入的校园网，因此也只介绍校园网下的网络配置，其他情况的同学需要去查一下资料配置。</p>\n<h3 id=\"1-1-接入校园网\"><a href=\"#1-1-接入校园网\" class=\"headerlink\" title=\"1.1 接入校园网\"></a>1.1 接入校园网</h3><p>首先，使用网线介入校园网，打通物理层面。注意不要接错网口，我之前因为接错网口，导致花了半下午时间找问题，可以说是很尴尬了。</p>\n<p>接下来，使用 <code>ifconfig</code> 命令来查看网卡类型，<code>eth0</code> or <code>em1</code> 这种，我这里是 <code>em1</code>。然后修改 <code>/etc/network/interfaces</code> 如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This file describes the network interfaces available on your system</span></span><br><span class=\"line\"><span class=\"comment\"># and how to activate them. For more information, see interfaces(5).</span></span><br><span class=\"line\"><span class=\"comment\"># The loopback network interface</span></span><br><span class=\"line\">auto lo</span><br><span class=\"line\">iface lo inet loopback</span><br><span class=\"line\"><span class=\"comment\"># The primary network interface</span></span><br><span class=\"line\">auto em1</span><br><span class=\"line\"><span class=\"comment\">#iface em1 inet dhcp</span></span><br><span class=\"line\">iface em1 inet static</span><br><span class=\"line\">address xx.xx.xx.xx</span><br><span class=\"line\">netmask xxx.xxx.xxx<span class=\"number\">.0</span></span><br><span class=\"line\">gateway xx.xx.xx.xxx</span><br><span class=\"line\">dns-nameservers xx.xx.x.xx</span><br></pre></td></tr></table></figure></p>\n<p>上面的配置其实就是给服务器设置一个静态 ip ，我们可以通过这个静态 ip 访问该服务器。然后配置网管，DNS 服务器什么的。和 windows 下配置类似，实验室用过有线的应该都懂。</p>\n<p>配置好之后，就可以连接内网了。使用 <code>ping 10.xx.xxx.xxx（你的校园网内网 ip 地址）</code> 来检查是否能连内网。</p>\n<p>注意，我这里记录的是我们学校的校园网接入方式，我不清楚不同学校的校园网接入方式是否相同，需要大家搞清楚。</p>\n<h3 id=\"1-2-镜像源配置\"><a href=\"#1-2-镜像源配置\" class=\"headerlink\" title=\"1.2 镜像源配置\"></a>1.2 镜像源配置</h3><h4 id=\"1-2-1-更改-apt-get-镜像源\"><a href=\"#1-2-1-更改-apt-get-镜像源\" class=\"headerlink\" title=\"1.2.1 更改 apt-get 镜像源\"></a>1.2.1 更改 apt-get 镜像源</h4><p>将服务器只放在校园网环境下，这样做有两个好处：</p>\n<ol>\n<li>安全</li>\n<li>校园网速度非常快</li>\n</ol>\n<p>但很明显，如果只连校园网，我们将无法下载日常使用的软件或者包。但还好，这个问题很好解决，只需要修改镜像源即可。</p>\n<p>我们在使用 <code>apt-get install</code> 命令时，会向外网发送请求，下载我们需要的软件。而修改镜像源之后，则会转而向我们指定的网站发送请求。这里我们使用的是清华的镜像源，清华的镜像源使用校园网内网即可访问，非常适合我们这种校园网的服务器。</p>\n<p>首先，把 <code>/etc/apt/source.list</code> 文件备份，然后将 <code>source.list</code> 的内容修改如下（具体内容和 linux 发行版本有关，具体见 <a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/\" target=\"_blank\" rel=\"noopener\">Ubuntu 镜像使用帮助</a>）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main restricted universe multiverse</span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty main restricted universe multiverse</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-updates main restricted universe multiverse</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-backports main restricted universe multiverse</span></span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-security main restricted universe multiverse</span></span><br><span class=\"line\"><span class=\"comment\"># 预发布软件源，不建议启用</span></span><br><span class=\"line\"><span class=\"comment\"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-proposed main restricted universe multiverse</span></span><br><span class=\"line\"><span class=\"comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ trusty-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>\n<p>然后就可以在内网下使用 <code>apt-get install</code> 命令了。</p>\n<h3 id=\"1-2-2-更改-pip-和-conda-源\"><a href=\"#1-2-2-更改-pip-和-conda-源\" class=\"headerlink\" title=\"1.2.2 更改 pip 和 conda 源\"></a>1.2.2 更改 pip 和 conda 源</h3><p>使用 pip 或者 conda 安装 python 模块非常方便，但是我们只接入了校园网，所以需要更改一下 pip 和 anaconda 的源。</p>\n<p>pip 更改方式如下：<br>修改 ~/.pip/pip.conf（没有就创建一个），内容如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">global</span>]</span><br><span class=\"line\">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p>\n<p>conda 更改方式如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 命令行输入如下命令</span></span><br><span class=\"line\">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class=\"line\">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure></p>\n<p>修改之后，可以测试一下速度，我这里能上 <code>10M/s</code>，还是非常快的。</p>\n<h3 id=\"1-2-3-外网访问\"><a href=\"#1-2-3-外网访问\" class=\"headerlink\" title=\"1.2.3 外网访问\"></a>1.2.3 外网访问</h3><p>如果是在需要访问外网，可以使用 vpn 连接到外网。我这里使用的是校内流传的一个软件，不同学校不同。</p>\n<p>使用 <code>sudo dpkg -i xl2tpd_1.2.5%2Bzju-1_amd64.deb</code> 安装之后，按照下面方式配置：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置用户名和密码</span></span><br><span class=\"line\">$ sudo vpn-connect -c</span><br><span class=\"line\">Configure L2TP VPN <span class=\"keyword\">for</span> ZJU.</span><br><span class=\"line\"><span class=\"comment\"># 这里的Username是你的学号，后面的@代表你是10/30/50包月。</span></span><br><span class=\"line\">Username: <span class=\"number\">216.</span>...@<span class=\"number\">10</span></span><br><span class=\"line\">Password: 你的密码</span><br><span class=\"line\"><span class=\"comment\"># 配置完成，使用这个命令开启连接</span></span><br><span class=\"line\">$ sudo vpn-connect</span><br><span class=\"line\"><span class=\"comment\">#连接成功，可以ping一下百度，看是否能连外网了</span></span><br><span class=\"line\">$ ping www.baidu.com</span><br><span class=\"line\"><span class=\"comment\"># 重连，断开等，可以使用下面的命令查看</span></span><br><span class=\"line\">$ vpn-connect -h</span><br></pre></td></tr></table></figure></p>\n<p>以上，基本上就是网络配置的内容了。以上配置好后，基本上就够一个服务器使用了，毕竟，作为计算型服务器，平时使用最多的也就是使用 ssh 远程访问和使用 pip 了。</p>\n<h2 id=\"2-环境配置\"><a href=\"#2-环境配置\" class=\"headerlink\" title=\"2. 环境配置\"></a>2. 环境配置</h2><p>这一节主要介绍下 python 环境配置。由于服务器需要多用户使用，因此虚拟环境必不可少。每个用户都使用自身的 python 虚拟环境，可以避免模块版本冲突等问题。此外，jupyter notebook 作为一个方便的 python 交互式环境，能在客户端使用它并且支持多用户使用，也是需要进行配置的。</p>\n<h3 id=\"2-1-python-虚拟环境\"><a href=\"#2-1-python-虚拟环境\" class=\"headerlink\" title=\"2.1 python 虚拟环境\"></a>2.1 python 虚拟环境</h3><p>python 环境我们使用 Anaconda 进行配置。Anaconda 集成了 python 环境和常用的模块，可以帮我们省很多功夫。</p>\n<p>使用 <code>sudo apt-get install anaconda3</code> 安装 Anaconda3。也可以去网上下载 anaconda3 的安装包，上传到服务器之后进行安装。Anyway，只要能够成功安装就行，这一步很简单。</p>\n<p>之后，可以在命令行输入<code>python</code> 和 <code>conda</code> 来查看是否安装成功。</p>\n<p>最后需要修改全局变量，因为此时，只有 root 用户能够使用该环境，其他用户无法正常使用。修改方式如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo <span class=\"string\">'PATH=/usr/lib/anaconda/bin:$PATH'</span> &gt;&gt; /etc/profile.d/anaconda.sh</span><br><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></p>\n<p>这样，所有用户都可以使用 Anaconda 了，也可以使用 conda 建立虚拟环境了。</p>\n<p>建议在使用服务器进行开发时，每位用户都在自己的 python 虚拟环境下进行开发，不要在全局安装 python 的包和库。建立虚拟环境的方式如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list all env:</span><br><span class=\"line\">    conda info --env</span><br><span class=\"line\">create a simple virtual env:</span><br><span class=\"line\">    conda create -n MyEnvName python=<span class=\"number\">3</span>*</span><br><span class=\"line\">delete virtual env:</span><br><span class=\"line\">    conda env remove -n MyEnvName</span><br></pre></td></tr></table></figure></p>\n<p>建立完成后，使用 <code>source activate MyEnvName</code> 进入虚拟环境，使用 <code>source deactivate</code> 推出虚拟环境。</p>\n<p>需要注意的是，在自己的虚拟环境下，使用 pip 安装 python 模块，还是安装到全局中的，需要使用 <code>conda -n myEnv install pip</code> 或者在虚拟环境下使用 <code>conda install pip</code> 来安装虚拟环境中的pip，这样在虚拟环境中使用pip就能将包安装到虚拟环境中了。</p>\n<h3 id=\"2-2-jupyter-notebook-配置\"><a href=\"#2-2-jupyter-notebook-配置\" class=\"headerlink\" title=\"2.2 jupyter notebook 配置\"></a>2.2 jupyter notebook 配置</h3><p>在服务器开启 jupyter notebook 服务，可以在客户端使用浏览器登陆服务器的 jupyter notebook，但是如果多用户同时使用，就需要每个用户都进行配置然后开启服务，非常麻烦。</p>\n<p>Jupyterhub 是一组进程，使用 JupyterHub 可以为组中的每个人分别提供单个用户的 Jupyter Notebook 服务器。具体使用方式见<a href=\"https://jupyterhub.readthedocs.io/en/0.7.0/quickstart.html\" target=\"_blank\" rel=\"noopener\">JupyterHub</a>。</p>\n<h2 id=\"3-深度学习环境：cuda9-0-cudnn7-1-tensorflow-1-5-0\"><a href=\"#3-深度学习环境：cuda9-0-cudnn7-1-tensorflow-1-5-0\" class=\"headerlink\" title=\"3. 深度学习环境：cuda9.0 + cudnn7.1 + tensorflow 1.5.0\"></a>3. 深度学习环境：cuda9.0 + cudnn7.1 + tensorflow 1.5.0</h2><p>我安装深度学习环境主要是为了使用 tensorflow, 但不同版本的 tensorflow 需要安装不同版本的 cuda ，所以需要先明确自己使用的 tensorflow 版本。我要使用 tensorflow 1.5.0 ，所以选择安装 cuda9.0 + cudnn7.1。</p>\n<h3 id=\"3-1-什么是-cuda-和-cudnn\"><a href=\"#3-1-什么是-cuda-和-cudnn\" class=\"headerlink\" title=\"3.1 什么是 cuda 和 cudnn\"></a>3.1 什么是 cuda 和 cudnn</h3><p>CUDA 是由 NVIDIA 推出的一种集成技术，用于 GPU 的并行计算。</p>\n<p>CUDA 的作用，是与通用程序对接。比如，我们使用 python 写的程序，将数据和运算逻辑准备好之后，需要调用 CUDA 库提供的函数来传递给 CUDA，CUDA 再调用显卡驱动对 CUDA 程序进行编译，然后再将编译好的程序和数据传送给 GPU 进行运算。</p>\n<p>而 cuDNN 是用于深度神经网络的 GPU 加速计算库。它可以将卷积神经网路的计算变换为对 GPU 更友好的矩阵运算，可以有效提高整个网络的训练速度。</p>\n<p>要使用 tensorflow 的 GPU 版本，我们需要安装 CUDA 和 cuDNN。</p>\n<h3 id=\"3-2-安装-cuda9-0-cudnn7-1\"><a href=\"#3-2-安装-cuda9-0-cudnn7-1\" class=\"headerlink\" title=\"3.2 安装 cuda9.0 + cudnn7.1\"></a>3.2 安装 cuda9.0 + cudnn7.1</h3><h4 id=\"3-2-1-安装前\"><a href=\"#3-2-1-安装前\" class=\"headerlink\" title=\"3.2.1 安装前\"></a>3.2.1 安装前</h4><ol>\n<li>首先，确保你的电脑上有 CUDA 支持的 GPU 硬件。</li>\n</ol>\n<p>在终端下，输入 <code>lspci | grep -i nvidia</code> 来查看。如果有 GPU 安装，会显示结果。</p>\n<ol>\n<li>确保系统中安装了 gcc</li>\n</ol>\n<p>使用 <code>gcc --version</code> 来查看 gcc 版本，确保系统中已经安装了 gcc 。</p>\n<ol>\n<li>验证系统是否安装了正确的内核头文件和开发包</li>\n</ol>\n<p>使用 <code>uname -r</code> 来查看系统的核版本。<br>使用 <code>$ sudo apt-get install linux-headers-$(uname -r)</code> 来安装当前正在运行的内核的内核头文件和开发包。</p>\n<ol>\n<li>下载 CUDA</li>\n</ol>\n<p>CUDA 可以在 <a href=\"https://developer.nvidia.com/cuda-downloads\" target=\"_blank\" rel=\"noopener\">NVIDIA 网站</a> 下载，选择自己相应的选项后，就可以下载了。我这里下载的是 CUDA9.0 的 runfile(local) 。 然后上传到服务器。</p>\n<h4 id=\"3-2-2-安装-cuda\"><a href=\"#3-2-2-安装-cuda\" class=\"headerlink\" title=\"3.2.2 安装 cuda\"></a>3.2.2 安装 cuda</h4><p>到之前我们下载的 runfile 文件目录下，运行如下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo sh cuda_&lt;version&gt;_linux.run</span><br></pre></td></tr></table></figure></p>\n<p>进行安装。</p>\n<p>安装程序会提示如下内容：</p>\n<ul>\n<li>EULA Acceptance：接受协议即可</li>\n<li>CUDA Driver installation：如果你已经装好了 nvidia 显卡驱动，这里需要选择 <code>n</code> 。注意，你的 nvidia 显卡驱动版本需要适配 CUDA 版本</li>\n<li>CUDA Toolkit installation，location，and /usr/local/cuda symbolic link：这里全选 <code>y</code> 和默认即可</li>\n<li>CUDA Samples installation and location：这个最好安装一下，后续可以用于验证 CUDA 是否安装正确</li>\n</ul>\n<p>安装完成后，重启系统。</p>\n<h4 id=\"3-2-3-安装后\"><a href=\"#3-2-3-安装后\" class=\"headerlink\" title=\"3.2.3 安装后\"></a>3.2.3 安装后</h4><p>重启系统后，需要修改环境变量。具体操作如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ export PATH=/usr/local/cuda-9.0/bin$&#123;PATH:+:$&#123;PATH&#125;&#125;</span><br><span class=\"line\">$ export LD_LIBRARY_PATH=/usr/local/cuda-9.0/lib64\\</span><br><span class=\"line\">                         $&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>至此，CUDA 安装完毕。接下来我们验证一下 CUDA 是否安装成功。</p>\n<ol>\n<li>检查 /dev/ 目录下是否存在以 nvidia* 开头的多个文件</li>\n<li><p>检查 CUDA Toolkit 是否安装成功</p>\n<p> 终端输入 <code>nvcc -V</code> 会输出 CUDA 版本信息</p>\n</li>\n<li><p>编译 Samples 例子</p>\n<p> 进入到 Samples 安装目录，终端输入 <code>make</code> 进行编译</p>\n</li>\n<li><p>编译完成后测试</p>\n<p> 进入 <code>bin/x86_64/linux/release/</code> 目录。</p>\n<p> 运行 deviceQuery 程序： <code>$ sudo ./deviceQuery</code> ，查看输出结果，最后一行显示 <code>Result = PASS</code> 表示通过测试。</p>\n<p> 运行 bandwidthTest 程序： <code>$ sudo ./bandwidthTest</code>, 查看输出结果，最后一行显示 <code>Result = PASS</code> 表示通过测试。</p>\n</li>\n</ol>\n<p>如果以上均没有问题，则说明 CUDA 安装成功。</p>\n<h4 id=\"3-2-4-安装-cudnn\"><a href=\"#3-2-4-安装-cudnn\" class=\"headerlink\" title=\"3.2.4 安装 cudnn\"></a>3.2.4 安装 cudnn</h4><p>cudnn 的安装非常简单，只有以下几步：</p>\n<ol>\n<li><p>下载 cudnn 安装包</p>\n<p> 前往 <a href=\"https://developer.nvidia.com/cudnn\" target=\"_blank\" rel=\"noopener\">NVIDIA cuDNN home page</a>, 注册账号之后，下载 cudnn 压缩包（tgz格式）。注意，win10 操作系统在下载 tgz 格式文件时，会将后缀名转变为 .solita* ，这个文件在 linux 下也能解压，但是会报错，实践证明，解压出的文件也是不能用的，因此，建议在 linux 系统或 mac os 下下载上述压缩包。然后上传到服务器。</p>\n</li>\n<li><p>解压压缩包</p>\n<p> 输入命令：<code>$ tar -xzvf cudnn-9.0-linux-x64-v7.tgz</code>，会在当前目录下生成一个 cuda/ 目录。</p>\n</li>\n<li><p>copy 以下文件到 CUDA Toolkit 目录下</p>\n<p> 终端输入以下命令：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo cp cuda/include/cudnn.h /usr/local/cuda/include</span><br><span class=\"line\">$ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64</span><br><span class=\"line\">$ sudo chmod a+r /usr/local/cuda/include/cudnn.h</span><br><span class=\"line\">$ sudo chmod a+r /usr/local/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>经过以上三步，cudnn 也安装好了，接下来只需要安装 tensorflow 了！</p>\n<h3 id=\"3-3-安装-tensorflow\"><a href=\"#3-3-安装-tensorflow\" class=\"headerlink\" title=\"3.3 安装 tensorflow\"></a>3.3 安装 tensorflow</h3><p>最简单的方式当然是使用 pip 进行安装了！</p>\n<p>在终端下输入 <code>pip install tensorflow-gpu==1.5.0</code> 即可。</p>\n<p>注意我们安装的是 gpu 版本，所以一定要是 <code>tensorflow-gpu</code>，等号后面代表我们想要安装的 tensorflow 版本。</p>\n<p>安装成功后，终端输入 <code>python</code> 进入 python 环境，运行以下代码，若运行成功，则说明我们的 tensorflow 环境也就配置成功了！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> tensorflow</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4. 总结\"></a>4. 总结</h2><p>要配置及维护好一个深度学习服务器还有很长的路要走。比如 ACL 文件权限管理系统，用户权限管理，shell script 学习等。</p>\n<p>我这里记录的内容，能够让服务器实现多用户深度学习开发，能对于现在的实验室已经够用了，之后后面的内容，如果有需要会继续学习。</p>\n<p>以上内容，最耗费时间的就是 CUDA 和 cudnn 环境的配置了。刚开始偷懒，想跟着中文博客去安装，后来看了数十篇博客，中间碰到各种问题又不断 Google ，解决了一个问题又出现新的问题，真的非常心累。 后来跟着 NVIDIA 的官网教程，重新安装了一遍，总算是成功了。</p>\n<p>这让我明白，无论是学习新东西也好，使用一个新工具也好，最好的资料一定是官方编写的。网上铺天盖地的博客，无非是对论文或者官方教程的二次加工。所以一定不要偷懒，耐着性子去琢磨英文版的官方教程，一定是没有问题的！</p>\n<p>我这篇博客其实是对我配置深度学习服务器的梳理，也是对查找的各种资料的总结和对官方教程的二次加工。前面的内容应该很好配置。 如果 CUDA 或 cudnn 的安装出了问题，建议仔细研读 NVIDIA 的官方教程。</p>\n<p><a href=\"https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html\" target=\"_blank\" rel=\"noopener\">Installation Guide Linux :: CUDA Toolkit Documentation</a></p>\n<p><a href=\"https://docs.nvidia.com/deeplearning/sdk/cudnn-install/\" target=\"_blank\" rel=\"noopener\">cuDNN Installation Guide :: Deep Learning SDK Documentation</a></p>"},{"title":"Python 文本编码","_content":"\n<!-- more -->\n\n> 转载请注明出处：\n> [Python文本编码](https://zhuyuhe.github.io/2018/05/13/python%E6%96%87%E6%9C%AC%E7%BC%96%E7%A0%81/)\n\n相信大家都碰到过令人头疼的python编码问题，比如：`'ascii' codec can't decode byte` `UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe9 in position 2892: invalid continuation byte` 等很多类似的问题。由于博主平时使用python处理自然语言比较多，因此少不了与字符串及其编码打交道。每次碰到这种问题，都要去google个半天，然后按网上的解决方案一个一个试，直到解决为止。\n\n终于有一天，我再也无法忍受这种重复的操作，下定决心一定要把这些问题背后的原因和解决方法搞清楚，于是就有了这片文章。力求搞懂python编码的原理，并总结了常见的问题和解决方案，方便以后查阅。\n\n### 1. 编码基础\n#### 1.1 什么是编码和解码\n首先，我们需要明白，计算机只能处理二进制数字，如果要处理文本，需要把文本转换为二进制数字，然后才能进行处理。\n\n同样，对于文本，计算机存储的是二进制数字，要想得到文本，需要将二进制数字转化为文本，才能呈现出我们看到的内容。\n\n也就是说，我们看到的是文本，计算机处理的是二进制数字。这中间肯定是需要来回转换的。从文本到二进制数字就是编码，从二进制数字到文本就是解码。\n\n#### 1.2 以 ASCII 编码为例\n以我们最熟悉的 ASCII 编码为例，大写字母 `A` 的编码是 `65`，小写字母 `a` 的编码是 `97`。\n```python\n>>> list('A'.encode('ascii'))\n[65]\n>>> list('a'.encode('ascii'))\n[97]\n```\n上面的代码意思是将 `A` 和 `a` 以 ASCII 编码方式编码后，得到的数字，这里以十进制表示之，换成二进制就是\n>'A' -> 01000001\n>'a' -> 01100001\n\n就是说，其实我们看到的上述两个字母，在计算机中，是以上面的二进制形式存储的。当我们需要使用或将字母展示出来的时候，计算机需要将二进制数字转化为字母，这个过程就是解码。\n\nASCII 编码是计算机发展早期发明的，当时只将 127 个字符进行了编码（字符到二进制数字的映射），也就是大小写英文字母，数字和一些符号。ASCII 码采用 8 位 bit 进行编码，也就是一个字节，能表示的最大整数就是 255。当处理中文时，255个字符，显然就不够了。\n\n#### 1.3 中文编码\n要处理中文，一个字节显然是不够的（中文字符数量可远远不止 255 个）。所以，中国制定了 `GB2312` 编码，使用两个字节来编码中文。两个字节能够表示 65535 个整数，基本上能够囊括所有的汉字了。让我们来看一下：\n```python\n>>> list('中'.encode('gb2312'))\n[214,208]\n>>> list('a'.encode('gb2312'))\n[97]\n```\n可以看到，`GB2312` 编码方式不仅可以将中文进行编码，同时兼容 `ASCII` 码，使用两者对 `ASCII` 的 127 个字符进行编码得到的结果是相同的。即\n> '中' -> 11010110 11010000\n> 'a' -> 00000000 01100001\n\n我们常见的 `gbk` 编码方式，其实就是在 `gb2312` 编码的基础上，增加了一些中文字符。\n\n现在，使用 `GB2312` 编码方式，我们能处理中英文混杂的文本了。那么问题来了，如果一段文本既有中文，又有英文，还有其他语言呢？\n\n#### 1.4 大统一：unicode 编码\n为每种语言制定一套编码方式实在是太蠢了！为什么不能把所有语言的所有字符一起编码呢？\n\n把所有语言统一到一套编码里，这套编码就是 unicode 编码。使用 unicode 编码，无论处理什么文本都不会出现乱码问题了。\n\nunicode 编码使用两个字节（16 位 bit）表示一个字符，比较偏僻的字符需要使用 4 个字节。\n\n但是新的问题又来了，如果一段纯英文文本，用 `unicode` 编码存储会比用 `ASCII` 编码多占用一倍空间！无论是存储还是传输都很浪费！\n\n#### 1.5 节约小能手：utf-8 编码\n为了改进上述问题，又提出了 `utf-8` 编码。该编码将一个 unicode 字符编码成 1~6 个字节，常用的英文字母被编码成 1 个字节，汉字通常是 3 个字节，只有很生僻的字符才会被编码成 4~6 个字节。注意，从 unicode 到 utf-8 并不是直接的对应，而是通过一些算法和规则来转换的。 \n\n来看一下具体编码例子吧：\n```python\n>>> list('中'.encode('utf-8'))\n[228, 184, 173]\n>>> list('a'.encode('utf-8'))\n[97]\n```\n可以看出，`utf-8` 将汉字 ‘中’ 编码成了三个字节，将英文字母 ‘a’ 编码成了一个字节，且 `utf-8` 编码兼容 `ASCII` 编码。\n\n### 2. Python编码\n#### 2.1 Python2 or Python3 ?\n从上面的知识，我们可以知道，字符的最佳定义应当是 Unicode 字符（存储及传输的时候再转为 utf-8）。\n\n从 Python3 的 str 对象中获取的元素是 Unicode 字符，这相当于从 Python2 的 unicode 对象中获取的元素。而 Python2 的 str 对象获取的是原始字节序列（相信用过 Python2 的都见过 ‘\\xe8\\x32\\xa6\\xb2......’ 这种乱七八糟的字符吧）。\n\n所以，我们的结论是：\n> 人生苦短，我用Python3\n\n#### 2.2 一个例子\n让我们来结合Python实例来具体看一下编码的应用：\n```python\n# Python3 字符串，为 Unicode 字符\n>>> a = '中文'\n>>> import sys\n# 查看当前系统默认编码方式（linux）， windows 默认为utf-8\n>>> sys.getfilesystemencoding()\n'utf-8'\n>>> with open('test.txt', 'w', encoding = 'utf-8') as f:\n···     f.write(a)\n···\n>>> with open('/home/zhuyuhe/test.txt', 'r'，encoding = 'utf-8') as f:\n...     print(f.readlines())\n...\n['中文']\n```\n上面两个 open 发生了什么的，让我们看一下：\n\n对于第一个 open 函数，它的执行流程是这样的：\n```graphLR\n[str对象获取 unicode 字符] -->|utf-8 编码| --> [字节序列] -->|二进制形式存储| --> [test.txt]\n```\n\n对于第二个 open 函数，它的执行流程是这样的：\n```graphLR\n[文件中存放的0101...] -->|utf-8 解码| --> [unicode 字符] --> [str 对象]\n```\n\n这里可能会有一点疑问，为什么 unicode 字符可以通过 utf-8 编码成二进制数字，二进制数字通过 utf-8 解码成 unicode 字符。\n\n前面已经说过，utf-8 是在 unicode 的基础上改进而来，是针对传输和存储而设计的一种编码方式。 utf-8 编码针对的对象是 unicode 字符。\n\n也就是说，在计算机内存中，统一使用 unicode 编码，当需要保存到硬盘或者需要传输的时候，就转换为 utf-8 编码。\n\n#### 2.3 另一个例子\n如果我们使用记事本打开上一小节保存的 `test.txt` 呢，这中间发生了什么呢？\n\n让我们同样用流程图来看一下：\n\n```\n[在计算机硬盘以0101...形式存放的文件] --> |记事本所使用的编码方式|--> B[我们看到的字符]\n```\n\n我们的 `test.txt` 是以 utf-8 的编码方式保存的，如果记事本使用的编码方式为 `gb2312`，打开该文件时，记事本会尝试以 `gb2312` 的方式解码该文件的字节序列（二进制数字），由于两者的字符与字节对应关系不同，当然会解码失败。此时记事本会显示各种乱码。这个过程类似下面的代码：\n\n```python\n>>> '中文'.encode('utf-8').decode('gbk')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nUnicodeDecodeError: 'gbk' codec can't decode byte 0xad in position 2: illegal multibyte sequence\n```\n\n如果碰到上述问题，可以尝试使用 [notepad++](https://notepad-plus-plus.org/) 打开该文件，尝试改变编辑器的编码方式，来尝试是否能正常打开文件。\n\n是的，只能去尝试。因为在没有任何信息的情况下，给我们一串字节序列，我们是不知道它的编码方式的。\n\n所以，在平时的文件存储和传输中，统一编码方式是很重要的。\n\n#### 2.4 统一编码\n在日常的使用中，避免乱码的重要方式就是统一你的编码方式。\n\n一般我们将编码方式统一为 utf-8，下面给出了一些参考的建议：\n\n 1. linux 使用 Python 时，可以使用如下代码查看默认编码：\n ```python\n >>> import sys\n >>> sys.getfilesystemencoding()\n \n ```\n 查看是否为 utf-8，如果不是，改成 utf-8。\n 2. windows 默认编码方式为 utf-8，不需要修改\n 3. 在使用 open 函数及其他读写函数时，加上 `encoding=utf-8`，确保文件以 utf-8 方式编码和解码。\n 4. 使用远程连接软件时，比如 XShell 或 MobaXterm ，将软件的编码选为 utf-8，这样可以保证远程连接显示正常。\n 5. 不要依赖系统的默认编码，打开文件时应始终明确传入 encoding = 参数，因为不同设备使用的默认编码不同，即使是同一设备，也可能会发生变化。\n \n其实，理解了为何需要做上述处理，也基本就理解了编码。碰到编码问题，结合错误信息，基本上就能很快找出发生错误的原因了。不过为了方便起见，我还是将常见的问题总结了下。\n\n### 3. 常见问题原因及解决方案\n#### 3.1 UnicodeEncodeError\n多数非 UTF 编码器只能处理 Unicode 字符的一小部分子集。把文本转换为字节序列时，如果目标编码中没有定义某个字符，就会抛出 UnicodeEncodeError 异常。\n\n看个例子：\n```python\n>>> '中文'.encode('ascii')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)\n\n```\n\n当我们尝试将中文字符以 ASCII 方式编码时，报出了 UnicodeEncodeError。这个原因很明显，ASCII 编码方式并没有定义中文字符，无法对中文字符进行编码。\n\n碰到这种问题，可以使用 errors 参数进行处理：\n```python\n>>> '中文'.encode('ascii', errors='ignore')\nb''\n```\n我们将错误的编码忽略掉，最后得到空的字节序列。通常，这样做是非常不妥的。\n\nerrors 参数还有许多可选项，大家可以自行探索。\n\n比较妥当的解决方案，当然是选择合适的编码方式。这个需要根据具体情况而定，相信，理解了这个错误发生的原因，解决起来就很轻松啦！\n\n#### 3.2 UnicodeDecodeError\n不是每一个字节都包含有有效的 ASCII 字符，也不是每一个字符序列都是有效的 utf-8 。因此把二进制序列转换为文本时，遇到无法转换的字节序列就会抛出 UnicodeDecodeError。\n\n看个例子：\n```python\n>>> b = b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'\n>>> b.decode('ascii')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xe4 in position 0: ordinal not in range(128)\n```\n\nb 是字符 '中文' 以 utf-8 方式编码形成的字节序列，属于 Python3 中的 bytes 类型。将该字节序列以 ASCII 方式解码时抛出了 UnicodeDecodeError。\n\n\n### 4 总结\n本文详细阐述了编码的原理及各种问题发生的原因，相信搞懂这些，以后碰到编码问题就再也不用求助 Google 了。知道了问题发生的原因，我们自己就能迅速解决了！\n\n### 参考文献\n\n[廖雪峰的官方网站-字符串和编码](https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000)\n[大道至简：史上最易懂的『乱码』解决方案](http://www.10tiao.com/html/506/201803/2651615541/1.html)\n《流畅的Python》\n\n\n\n","source":"_posts/python文本编码.md","raw":"---\ntitle: Python 文本编码\ntags: 编程语言 编码\n---\n\n<!-- more -->\n\n> 转载请注明出处：\n> [Python文本编码](https://zhuyuhe.github.io/2018/05/13/python%E6%96%87%E6%9C%AC%E7%BC%96%E7%A0%81/)\n\n相信大家都碰到过令人头疼的python编码问题，比如：`'ascii' codec can't decode byte` `UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe9 in position 2892: invalid continuation byte` 等很多类似的问题。由于博主平时使用python处理自然语言比较多，因此少不了与字符串及其编码打交道。每次碰到这种问题，都要去google个半天，然后按网上的解决方案一个一个试，直到解决为止。\n\n终于有一天，我再也无法忍受这种重复的操作，下定决心一定要把这些问题背后的原因和解决方法搞清楚，于是就有了这片文章。力求搞懂python编码的原理，并总结了常见的问题和解决方案，方便以后查阅。\n\n### 1. 编码基础\n#### 1.1 什么是编码和解码\n首先，我们需要明白，计算机只能处理二进制数字，如果要处理文本，需要把文本转换为二进制数字，然后才能进行处理。\n\n同样，对于文本，计算机存储的是二进制数字，要想得到文本，需要将二进制数字转化为文本，才能呈现出我们看到的内容。\n\n也就是说，我们看到的是文本，计算机处理的是二进制数字。这中间肯定是需要来回转换的。从文本到二进制数字就是编码，从二进制数字到文本就是解码。\n\n#### 1.2 以 ASCII 编码为例\n以我们最熟悉的 ASCII 编码为例，大写字母 `A` 的编码是 `65`，小写字母 `a` 的编码是 `97`。\n```python\n>>> list('A'.encode('ascii'))\n[65]\n>>> list('a'.encode('ascii'))\n[97]\n```\n上面的代码意思是将 `A` 和 `a` 以 ASCII 编码方式编码后，得到的数字，这里以十进制表示之，换成二进制就是\n>'A' -> 01000001\n>'a' -> 01100001\n\n就是说，其实我们看到的上述两个字母，在计算机中，是以上面的二进制形式存储的。当我们需要使用或将字母展示出来的时候，计算机需要将二进制数字转化为字母，这个过程就是解码。\n\nASCII 编码是计算机发展早期发明的，当时只将 127 个字符进行了编码（字符到二进制数字的映射），也就是大小写英文字母，数字和一些符号。ASCII 码采用 8 位 bit 进行编码，也就是一个字节，能表示的最大整数就是 255。当处理中文时，255个字符，显然就不够了。\n\n#### 1.3 中文编码\n要处理中文，一个字节显然是不够的（中文字符数量可远远不止 255 个）。所以，中国制定了 `GB2312` 编码，使用两个字节来编码中文。两个字节能够表示 65535 个整数，基本上能够囊括所有的汉字了。让我们来看一下：\n```python\n>>> list('中'.encode('gb2312'))\n[214,208]\n>>> list('a'.encode('gb2312'))\n[97]\n```\n可以看到，`GB2312` 编码方式不仅可以将中文进行编码，同时兼容 `ASCII` 码，使用两者对 `ASCII` 的 127 个字符进行编码得到的结果是相同的。即\n> '中' -> 11010110 11010000\n> 'a' -> 00000000 01100001\n\n我们常见的 `gbk` 编码方式，其实就是在 `gb2312` 编码的基础上，增加了一些中文字符。\n\n现在，使用 `GB2312` 编码方式，我们能处理中英文混杂的文本了。那么问题来了，如果一段文本既有中文，又有英文，还有其他语言呢？\n\n#### 1.4 大统一：unicode 编码\n为每种语言制定一套编码方式实在是太蠢了！为什么不能把所有语言的所有字符一起编码呢？\n\n把所有语言统一到一套编码里，这套编码就是 unicode 编码。使用 unicode 编码，无论处理什么文本都不会出现乱码问题了。\n\nunicode 编码使用两个字节（16 位 bit）表示一个字符，比较偏僻的字符需要使用 4 个字节。\n\n但是新的问题又来了，如果一段纯英文文本，用 `unicode` 编码存储会比用 `ASCII` 编码多占用一倍空间！无论是存储还是传输都很浪费！\n\n#### 1.5 节约小能手：utf-8 编码\n为了改进上述问题，又提出了 `utf-8` 编码。该编码将一个 unicode 字符编码成 1~6 个字节，常用的英文字母被编码成 1 个字节，汉字通常是 3 个字节，只有很生僻的字符才会被编码成 4~6 个字节。注意，从 unicode 到 utf-8 并不是直接的对应，而是通过一些算法和规则来转换的。 \n\n来看一下具体编码例子吧：\n```python\n>>> list('中'.encode('utf-8'))\n[228, 184, 173]\n>>> list('a'.encode('utf-8'))\n[97]\n```\n可以看出，`utf-8` 将汉字 ‘中’ 编码成了三个字节，将英文字母 ‘a’ 编码成了一个字节，且 `utf-8` 编码兼容 `ASCII` 编码。\n\n### 2. Python编码\n#### 2.1 Python2 or Python3 ?\n从上面的知识，我们可以知道，字符的最佳定义应当是 Unicode 字符（存储及传输的时候再转为 utf-8）。\n\n从 Python3 的 str 对象中获取的元素是 Unicode 字符，这相当于从 Python2 的 unicode 对象中获取的元素。而 Python2 的 str 对象获取的是原始字节序列（相信用过 Python2 的都见过 ‘\\xe8\\x32\\xa6\\xb2......’ 这种乱七八糟的字符吧）。\n\n所以，我们的结论是：\n> 人生苦短，我用Python3\n\n#### 2.2 一个例子\n让我们来结合Python实例来具体看一下编码的应用：\n```python\n# Python3 字符串，为 Unicode 字符\n>>> a = '中文'\n>>> import sys\n# 查看当前系统默认编码方式（linux）， windows 默认为utf-8\n>>> sys.getfilesystemencoding()\n'utf-8'\n>>> with open('test.txt', 'w', encoding = 'utf-8') as f:\n···     f.write(a)\n···\n>>> with open('/home/zhuyuhe/test.txt', 'r'，encoding = 'utf-8') as f:\n...     print(f.readlines())\n...\n['中文']\n```\n上面两个 open 发生了什么的，让我们看一下：\n\n对于第一个 open 函数，它的执行流程是这样的：\n```graphLR\n[str对象获取 unicode 字符] -->|utf-8 编码| --> [字节序列] -->|二进制形式存储| --> [test.txt]\n```\n\n对于第二个 open 函数，它的执行流程是这样的：\n```graphLR\n[文件中存放的0101...] -->|utf-8 解码| --> [unicode 字符] --> [str 对象]\n```\n\n这里可能会有一点疑问，为什么 unicode 字符可以通过 utf-8 编码成二进制数字，二进制数字通过 utf-8 解码成 unicode 字符。\n\n前面已经说过，utf-8 是在 unicode 的基础上改进而来，是针对传输和存储而设计的一种编码方式。 utf-8 编码针对的对象是 unicode 字符。\n\n也就是说，在计算机内存中，统一使用 unicode 编码，当需要保存到硬盘或者需要传输的时候，就转换为 utf-8 编码。\n\n#### 2.3 另一个例子\n如果我们使用记事本打开上一小节保存的 `test.txt` 呢，这中间发生了什么呢？\n\n让我们同样用流程图来看一下：\n\n```\n[在计算机硬盘以0101...形式存放的文件] --> |记事本所使用的编码方式|--> B[我们看到的字符]\n```\n\n我们的 `test.txt` 是以 utf-8 的编码方式保存的，如果记事本使用的编码方式为 `gb2312`，打开该文件时，记事本会尝试以 `gb2312` 的方式解码该文件的字节序列（二进制数字），由于两者的字符与字节对应关系不同，当然会解码失败。此时记事本会显示各种乱码。这个过程类似下面的代码：\n\n```python\n>>> '中文'.encode('utf-8').decode('gbk')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nUnicodeDecodeError: 'gbk' codec can't decode byte 0xad in position 2: illegal multibyte sequence\n```\n\n如果碰到上述问题，可以尝试使用 [notepad++](https://notepad-plus-plus.org/) 打开该文件，尝试改变编辑器的编码方式，来尝试是否能正常打开文件。\n\n是的，只能去尝试。因为在没有任何信息的情况下，给我们一串字节序列，我们是不知道它的编码方式的。\n\n所以，在平时的文件存储和传输中，统一编码方式是很重要的。\n\n#### 2.4 统一编码\n在日常的使用中，避免乱码的重要方式就是统一你的编码方式。\n\n一般我们将编码方式统一为 utf-8，下面给出了一些参考的建议：\n\n 1. linux 使用 Python 时，可以使用如下代码查看默认编码：\n ```python\n >>> import sys\n >>> sys.getfilesystemencoding()\n \n ```\n 查看是否为 utf-8，如果不是，改成 utf-8。\n 2. windows 默认编码方式为 utf-8，不需要修改\n 3. 在使用 open 函数及其他读写函数时，加上 `encoding=utf-8`，确保文件以 utf-8 方式编码和解码。\n 4. 使用远程连接软件时，比如 XShell 或 MobaXterm ，将软件的编码选为 utf-8，这样可以保证远程连接显示正常。\n 5. 不要依赖系统的默认编码，打开文件时应始终明确传入 encoding = 参数，因为不同设备使用的默认编码不同，即使是同一设备，也可能会发生变化。\n \n其实，理解了为何需要做上述处理，也基本就理解了编码。碰到编码问题，结合错误信息，基本上就能很快找出发生错误的原因了。不过为了方便起见，我还是将常见的问题总结了下。\n\n### 3. 常见问题原因及解决方案\n#### 3.1 UnicodeEncodeError\n多数非 UTF 编码器只能处理 Unicode 字符的一小部分子集。把文本转换为字节序列时，如果目标编码中没有定义某个字符，就会抛出 UnicodeEncodeError 异常。\n\n看个例子：\n```python\n>>> '中文'.encode('ascii')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)\n\n```\n\n当我们尝试将中文字符以 ASCII 方式编码时，报出了 UnicodeEncodeError。这个原因很明显，ASCII 编码方式并没有定义中文字符，无法对中文字符进行编码。\n\n碰到这种问题，可以使用 errors 参数进行处理：\n```python\n>>> '中文'.encode('ascii', errors='ignore')\nb''\n```\n我们将错误的编码忽略掉，最后得到空的字节序列。通常，这样做是非常不妥的。\n\nerrors 参数还有许多可选项，大家可以自行探索。\n\n比较妥当的解决方案，当然是选择合适的编码方式。这个需要根据具体情况而定，相信，理解了这个错误发生的原因，解决起来就很轻松啦！\n\n#### 3.2 UnicodeDecodeError\n不是每一个字节都包含有有效的 ASCII 字符，也不是每一个字符序列都是有效的 utf-8 。因此把二进制序列转换为文本时，遇到无法转换的字节序列就会抛出 UnicodeDecodeError。\n\n看个例子：\n```python\n>>> b = b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'\n>>> b.decode('ascii')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xe4 in position 0: ordinal not in range(128)\n```\n\nb 是字符 '中文' 以 utf-8 方式编码形成的字节序列，属于 Python3 中的 bytes 类型。将该字节序列以 ASCII 方式解码时抛出了 UnicodeDecodeError。\n\n\n### 4 总结\n本文详细阐述了编码的原理及各种问题发生的原因，相信搞懂这些，以后碰到编码问题就再也不用求助 Google 了。知道了问题发生的原因，我们自己就能迅速解决了！\n\n### 参考文献\n\n[廖雪峰的官方网站-字符串和编码](https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000)\n[大道至简：史上最易懂的『乱码』解决方案](http://www.10tiao.com/html/506/201803/2651615541/1.html)\n《流畅的Python》\n\n\n\n","slug":"python文本编码","published":1,"date":"2018-05-13T06:58:14.354Z","updated":"2018-05-13T07:08:25.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqw6heis0004gsujypfk4dhk","content":"<a id=\"more\"></a>\n<blockquote>\n<p>转载请注明出处：<br><a href=\"https://zhuyuhe.github.io/2018/05/13/python%E6%96%87%E6%9C%AC%E7%BC%96%E7%A0%81/\">Python文本编码</a></p>\n</blockquote>\n<p>相信大家都碰到过令人头疼的python编码问题，比如：<code>&#39;ascii&#39; codec can&#39;t decode byte</code> <code>UnicodeDecodeError: &#39;utf-8&#39; codec can&#39;t decode byte 0xe9 in position 2892: invalid continuation byte</code> 等很多类似的问题。由于博主平时使用python处理自然语言比较多，因此少不了与字符串及其编码打交道。每次碰到这种问题，都要去google个半天，然后按网上的解决方案一个一个试，直到解决为止。</p>\n<p>终于有一天，我再也无法忍受这种重复的操作，下定决心一定要把这些问题背后的原因和解决方法搞清楚，于是就有了这片文章。力求搞懂python编码的原理，并总结了常见的问题和解决方案，方便以后查阅。</p>\n<h3 id=\"1-编码基础\"><a href=\"#1-编码基础\" class=\"headerlink\" title=\"1. 编码基础\"></a>1. 编码基础</h3><h4 id=\"1-1-什么是编码和解码\"><a href=\"#1-1-什么是编码和解码\" class=\"headerlink\" title=\"1.1 什么是编码和解码\"></a>1.1 什么是编码和解码</h4><p>首先，我们需要明白，计算机只能处理二进制数字，如果要处理文本，需要把文本转换为二进制数字，然后才能进行处理。</p>\n<p>同样，对于文本，计算机存储的是二进制数字，要想得到文本，需要将二进制数字转化为文本，才能呈现出我们看到的内容。</p>\n<p>也就是说，我们看到的是文本，计算机处理的是二进制数字。这中间肯定是需要来回转换的。从文本到二进制数字就是编码，从二进制数字到文本就是解码。</p>\n<h4 id=\"1-2-以-ASCII-编码为例\"><a href=\"#1-2-以-ASCII-编码为例\" class=\"headerlink\" title=\"1.2 以 ASCII 编码为例\"></a>1.2 以 ASCII 编码为例</h4><p>以我们最熟悉的 ASCII 编码为例，大写字母 <code>A</code> 的编码是 <code>65</code>，小写字母 <code>a</code> 的编码是 <code>97</code>。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(<span class=\"string\">'A'</span>.encode(<span class=\"string\">'ascii'</span>))</span><br><span class=\"line\">[<span class=\"number\">65</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(<span class=\"string\">'a'</span>.encode(<span class=\"string\">'ascii'</span>))</span><br><span class=\"line\">[<span class=\"number\">97</span>]</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码意思是将 <code>A</code> 和 <code>a</code> 以 ASCII 编码方式编码后，得到的数字，这里以十进制表示之，换成二进制就是</p>\n<blockquote>\n<p>‘A’ -&gt; 01000001<br>‘a’ -&gt; 01100001</p>\n</blockquote>\n<p>就是说，其实我们看到的上述两个字母，在计算机中，是以上面的二进制形式存储的。当我们需要使用或将字母展示出来的时候，计算机需要将二进制数字转化为字母，这个过程就是解码。</p>\n<p>ASCII 编码是计算机发展早期发明的，当时只将 127 个字符进行了编码（字符到二进制数字的映射），也就是大小写英文字母，数字和一些符号。ASCII 码采用 8 位 bit 进行编码，也就是一个字节，能表示的最大整数就是 255。当处理中文时，255个字符，显然就不够了。</p>\n<h4 id=\"1-3-中文编码\"><a href=\"#1-3-中文编码\" class=\"headerlink\" title=\"1.3 中文编码\"></a>1.3 中文编码</h4><p>要处理中文，一个字节显然是不够的（中文字符数量可远远不止 255 个）。所以，中国制定了 <code>GB2312</code> 编码，使用两个字节来编码中文。两个字节能够表示 65535 个整数，基本上能够囊括所有的汉字了。让我们来看一下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(<span class=\"string\">'中'</span>.encode(<span class=\"string\">'gb2312'</span>))</span><br><span class=\"line\">[<span class=\"number\">214</span>,<span class=\"number\">208</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(<span class=\"string\">'a'</span>.encode(<span class=\"string\">'gb2312'</span>))</span><br><span class=\"line\">[<span class=\"number\">97</span>]</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，<code>GB2312</code> 编码方式不仅可以将中文进行编码，同时兼容 <code>ASCII</code> 码，使用两者对 <code>ASCII</code> 的 127 个字符进行编码得到的结果是相同的。即</p>\n<blockquote>\n<p>‘中’ -&gt; 11010110 11010000<br>‘a’ -&gt; 00000000 01100001</p>\n</blockquote>\n<p>我们常见的 <code>gbk</code> 编码方式，其实就是在 <code>gb2312</code> 编码的基础上，增加了一些中文字符。</p>\n<p>现在，使用 <code>GB2312</code> 编码方式，我们能处理中英文混杂的文本了。那么问题来了，如果一段文本既有中文，又有英文，还有其他语言呢？</p>\n<h4 id=\"1-4-大统一：unicode-编码\"><a href=\"#1-4-大统一：unicode-编码\" class=\"headerlink\" title=\"1.4 大统一：unicode 编码\"></a>1.4 大统一：unicode 编码</h4><p>为每种语言制定一套编码方式实在是太蠢了！为什么不能把所有语言的所有字符一起编码呢？</p>\n<p>把所有语言统一到一套编码里，这套编码就是 unicode 编码。使用 unicode 编码，无论处理什么文本都不会出现乱码问题了。</p>\n<p>unicode 编码使用两个字节（16 位 bit）表示一个字符，比较偏僻的字符需要使用 4 个字节。</p>\n<p>但是新的问题又来了，如果一段纯英文文本，用 <code>unicode</code> 编码存储会比用 <code>ASCII</code> 编码多占用一倍空间！无论是存储还是传输都很浪费！</p>\n<h4 id=\"1-5-节约小能手：utf-8-编码\"><a href=\"#1-5-节约小能手：utf-8-编码\" class=\"headerlink\" title=\"1.5 节约小能手：utf-8 编码\"></a>1.5 节约小能手：utf-8 编码</h4><p>为了改进上述问题，又提出了 <code>utf-8</code> 编码。该编码将一个 unicode 字符编码成 1~6 个字节，常用的英文字母被编码成 1 个字节，汉字通常是 3 个字节，只有很生僻的字符才会被编码成 4~6 个字节。注意，从 unicode 到 utf-8 并不是直接的对应，而是通过一些算法和规则来转换的。 </p>\n<p>来看一下具体编码例子吧：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(<span class=\"string\">'中'</span>.encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">[<span class=\"number\">228</span>, <span class=\"number\">184</span>, <span class=\"number\">173</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(<span class=\"string\">'a'</span>.encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">[<span class=\"number\">97</span>]</span><br></pre></td></tr></table></figure></p>\n<p>可以看出，<code>utf-8</code> 将汉字 ‘中’ 编码成了三个字节，将英文字母 ‘a’ 编码成了一个字节，且 <code>utf-8</code> 编码兼容 <code>ASCII</code> 编码。</p>\n<h3 id=\"2-Python编码\"><a href=\"#2-Python编码\" class=\"headerlink\" title=\"2. Python编码\"></a>2. Python编码</h3><h4 id=\"2-1-Python2-or-Python3\"><a href=\"#2-1-Python2-or-Python3\" class=\"headerlink\" title=\"2.1 Python2 or Python3 ?\"></a>2.1 Python2 or Python3 ?</h4><p>从上面的知识，我们可以知道，字符的最佳定义应当是 Unicode 字符（存储及传输的时候再转为 utf-8）。</p>\n<p>从 Python3 的 str 对象中获取的元素是 Unicode 字符，这相当于从 Python2 的 unicode 对象中获取的元素。而 Python2 的 str 对象获取的是原始字节序列（相信用过 Python2 的都见过 ‘\\xe8\\x32\\xa6\\xb2……’ 这种乱七八糟的字符吧）。</p>\n<p>所以，我们的结论是：</p>\n<blockquote>\n<p>人生苦短，我用Python3</p>\n</blockquote>\n<h4 id=\"2-2-一个例子\"><a href=\"#2-2-一个例子\" class=\"headerlink\" title=\"2.2 一个例子\"></a>2.2 一个例子</h4><p>让我们来结合Python实例来具体看一下编码的应用：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Python3 字符串，为 Unicode 字符</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'中文'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"comment\"># 查看当前系统默认编码方式（linux）， windows 默认为utf-8</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.getfilesystemencoding()</span><br><span class=\"line\"><span class=\"string\">'utf-8'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">with</span> open(<span class=\"string\">'test.txt'</span>, <span class=\"string\">'w'</span>, encoding = <span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">···     f.write(a)</span><br><span class=\"line\">···</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">with</span> open(<span class=\"string\">'/home/zhuyuhe/test.txt'</span>, <span class=\"string\">'r'</span>，encoding = <span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(f.readlines())</span><br><span class=\"line\">...</span><br><span class=\"line\">[<span class=\"string\">'中文'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>上面两个 open 发生了什么的，让我们看一下：</p>\n<p>对于第一个 open 函数，它的执行流程是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[str对象获取 unicode 字符] --&gt;|utf-8 编码| --&gt; [字节序列] --&gt;|二进制形式存储| --&gt; [test.txt]</span><br></pre></td></tr></table></figure></p>\n<p>对于第二个 open 函数，它的执行流程是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[文件中存放的0101...] --&gt;|utf-8 解码| --&gt; [unicode 字符] --&gt; [str 对象]</span><br></pre></td></tr></table></figure></p>\n<p>这里可能会有一点疑问，为什么 unicode 字符可以通过 utf-8 编码成二进制数字，二进制数字通过 utf-8 解码成 unicode 字符。</p>\n<p>前面已经说过，utf-8 是在 unicode 的基础上改进而来，是针对传输和存储而设计的一种编码方式。 utf-8 编码针对的对象是 unicode 字符。</p>\n<p>也就是说，在计算机内存中，统一使用 unicode 编码，当需要保存到硬盘或者需要传输的时候，就转换为 utf-8 编码。</p>\n<h4 id=\"2-3-另一个例子\"><a href=\"#2-3-另一个例子\" class=\"headerlink\" title=\"2.3 另一个例子\"></a>2.3 另一个例子</h4><p>如果我们使用记事本打开上一小节保存的 <code>test.txt</code> 呢，这中间发生了什么呢？</p>\n<p>让我们同样用流程图来看一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[在计算机硬盘以0101...形式存放的文件] --&gt; |记事本所使用的编码方式|--&gt; B[我们看到的字符]</span><br></pre></td></tr></table></figure>\n<p>我们的 <code>test.txt</code> 是以 utf-8 的编码方式保存的，如果记事本使用的编码方式为 <code>gb2312</code>，打开该文件时，记事本会尝试以 <code>gb2312</code> 的方式解码该文件的字节序列（二进制数字），由于两者的字符与字节对应关系不同，当然会解码失败。此时记事本会显示各种乱码。这个过程类似下面的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'中文'</span>.encode(<span class=\"string\">'utf-8'</span>).decode(<span class=\"string\">'gbk'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">UnicodeDecodeError: <span class=\"string\">'gbk'</span> codec can<span class=\"string\">'t decode byte 0xad in position 2: illegal multibyte sequence</span></span><br></pre></td></tr></table></figure>\n<p>如果碰到上述问题，可以尝试使用 <a href=\"https://notepad-plus-plus.org/\" target=\"_blank\" rel=\"noopener\">notepad++</a> 打开该文件，尝试改变编辑器的编码方式，来尝试是否能正常打开文件。</p>\n<p>是的，只能去尝试。因为在没有任何信息的情况下，给我们一串字节序列，我们是不知道它的编码方式的。</p>\n<p>所以，在平时的文件存储和传输中，统一编码方式是很重要的。</p>\n<h4 id=\"2-4-统一编码\"><a href=\"#2-4-统一编码\" class=\"headerlink\" title=\"2.4 统一编码\"></a>2.4 统一编码</h4><p>在日常的使用中，避免乱码的重要方式就是统一你的编码方式。</p>\n<p>一般我们将编码方式统一为 utf-8，下面给出了一些参考的建议：</p>\n<ol>\n<li><p>linux 使用 Python 时，可以使用如下代码查看默认编码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.getfilesystemencoding()</span><br></pre></td></tr></table></figure>\n<p>查看是否为 utf-8，如果不是，改成 utf-8。</p>\n</li>\n<li>windows 默认编码方式为 utf-8，不需要修改</li>\n<li>在使用 open 函数及其他读写函数时，加上 <code>encoding=utf-8</code>，确保文件以 utf-8 方式编码和解码。</li>\n<li>使用远程连接软件时，比如 XShell 或 MobaXterm ，将软件的编码选为 utf-8，这样可以保证远程连接显示正常。</li>\n<li>不要依赖系统的默认编码，打开文件时应始终明确传入 encoding = 参数，因为不同设备使用的默认编码不同，即使是同一设备，也可能会发生变化。</li>\n</ol>\n<p>其实，理解了为何需要做上述处理，也基本就理解了编码。碰到编码问题，结合错误信息，基本上就能很快找出发生错误的原因了。不过为了方便起见，我还是将常见的问题总结了下。</p>\n<h3 id=\"3-常见问题原因及解决方案\"><a href=\"#3-常见问题原因及解决方案\" class=\"headerlink\" title=\"3. 常见问题原因及解决方案\"></a>3. 常见问题原因及解决方案</h3><h4 id=\"3-1-UnicodeEncodeError\"><a href=\"#3-1-UnicodeEncodeError\" class=\"headerlink\" title=\"3.1 UnicodeEncodeError\"></a>3.1 UnicodeEncodeError</h4><p>多数非 UTF 编码器只能处理 Unicode 字符的一小部分子集。把文本转换为字节序列时，如果目标编码中没有定义某个字符，就会抛出 UnicodeEncodeError 异常。</p>\n<p>看个例子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'中文'</span>.encode(<span class=\"string\">'ascii'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">UnicodeEncodeError: <span class=\"string\">'ascii'</span> codec can<span class=\"string\">'t encode characters in position 0-1: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure></p>\n<p>当我们尝试将中文字符以 ASCII 方式编码时，报出了 UnicodeEncodeError。这个原因很明显，ASCII 编码方式并没有定义中文字符，无法对中文字符进行编码。</p>\n<p>碰到这种问题，可以使用 errors 参数进行处理：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'中文'</span>.encode(<span class=\"string\">'ascii'</span>, errors=<span class=\"string\">'ignore'</span>)</span><br><span class=\"line\"><span class=\"string\">b''</span></span><br></pre></td></tr></table></figure></p>\n<p>我们将错误的编码忽略掉，最后得到空的字节序列。通常，这样做是非常不妥的。</p>\n<p>errors 参数还有许多可选项，大家可以自行探索。</p>\n<p>比较妥当的解决方案，当然是选择合适的编码方式。这个需要根据具体情况而定，相信，理解了这个错误发生的原因，解决起来就很轻松啦！</p>\n<h4 id=\"3-2-UnicodeDecodeError\"><a href=\"#3-2-UnicodeDecodeError\" class=\"headerlink\" title=\"3.2 UnicodeDecodeError\"></a>3.2 UnicodeDecodeError</h4><p>不是每一个字节都包含有有效的 ASCII 字符，也不是每一个字符序列都是有效的 utf-8 。因此把二进制序列转换为文本时，遇到无法转换的字节序列就会抛出 UnicodeDecodeError。</p>\n<p>看个例子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b.decode(<span class=\"string\">'ascii'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">UnicodeDecodeError: <span class=\"string\">'ascii'</span> codec can<span class=\"string\">'t decode byte 0xe4 in position 0: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure></p>\n<p>b 是字符 ‘中文’ 以 utf-8 方式编码形成的字节序列，属于 Python3 中的 bytes 类型。将该字节序列以 ASCII 方式解码时抛出了 UnicodeDecodeError。</p>\n<h3 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4 总结\"></a>4 总结</h3><p>本文详细阐述了编码的原理及各种问题发生的原因，相信搞懂这些，以后碰到编码问题就再也不用求助 Google 了。知道了问题发生的原因，我们自己就能迅速解决了！</p>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><p><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000\" target=\"_blank\" rel=\"noopener\">廖雪峰的官方网站-字符串和编码</a><br><a href=\"http://www.10tiao.com/html/506/201803/2651615541/1.html\" target=\"_blank\" rel=\"noopener\">大道至简：史上最易懂的『乱码』解决方案</a><br>《流畅的Python》</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>转载请注明出处：<br><a href=\"https://zhuyuhe.github.io/2018/05/13/python%E6%96%87%E6%9C%AC%E7%BC%96%E7%A0%81/\">Python文本编码</a></p>\n</blockquote>\n<p>相信大家都碰到过令人头疼的python编码问题，比如：<code>&#39;ascii&#39; codec can&#39;t decode byte</code> <code>UnicodeDecodeError: &#39;utf-8&#39; codec can&#39;t decode byte 0xe9 in position 2892: invalid continuation byte</code> 等很多类似的问题。由于博主平时使用python处理自然语言比较多，因此少不了与字符串及其编码打交道。每次碰到这种问题，都要去google个半天，然后按网上的解决方案一个一个试，直到解决为止。</p>\n<p>终于有一天，我再也无法忍受这种重复的操作，下定决心一定要把这些问题背后的原因和解决方法搞清楚，于是就有了这片文章。力求搞懂python编码的原理，并总结了常见的问题和解决方案，方便以后查阅。</p>\n<h3 id=\"1-编码基础\"><a href=\"#1-编码基础\" class=\"headerlink\" title=\"1. 编码基础\"></a>1. 编码基础</h3><h4 id=\"1-1-什么是编码和解码\"><a href=\"#1-1-什么是编码和解码\" class=\"headerlink\" title=\"1.1 什么是编码和解码\"></a>1.1 什么是编码和解码</h4><p>首先，我们需要明白，计算机只能处理二进制数字，如果要处理文本，需要把文本转换为二进制数字，然后才能进行处理。</p>\n<p>同样，对于文本，计算机存储的是二进制数字，要想得到文本，需要将二进制数字转化为文本，才能呈现出我们看到的内容。</p>\n<p>也就是说，我们看到的是文本，计算机处理的是二进制数字。这中间肯定是需要来回转换的。从文本到二进制数字就是编码，从二进制数字到文本就是解码。</p>\n<h4 id=\"1-2-以-ASCII-编码为例\"><a href=\"#1-2-以-ASCII-编码为例\" class=\"headerlink\" title=\"1.2 以 ASCII 编码为例\"></a>1.2 以 ASCII 编码为例</h4><p>以我们最熟悉的 ASCII 编码为例，大写字母 <code>A</code> 的编码是 <code>65</code>，小写字母 <code>a</code> 的编码是 <code>97</code>。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(<span class=\"string\">'A'</span>.encode(<span class=\"string\">'ascii'</span>))</span><br><span class=\"line\">[<span class=\"number\">65</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(<span class=\"string\">'a'</span>.encode(<span class=\"string\">'ascii'</span>))</span><br><span class=\"line\">[<span class=\"number\">97</span>]</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码意思是将 <code>A</code> 和 <code>a</code> 以 ASCII 编码方式编码后，得到的数字，这里以十进制表示之，换成二进制就是</p>\n<blockquote>\n<p>‘A’ -&gt; 01000001<br>‘a’ -&gt; 01100001</p>\n</blockquote>\n<p>就是说，其实我们看到的上述两个字母，在计算机中，是以上面的二进制形式存储的。当我们需要使用或将字母展示出来的时候，计算机需要将二进制数字转化为字母，这个过程就是解码。</p>\n<p>ASCII 编码是计算机发展早期发明的，当时只将 127 个字符进行了编码（字符到二进制数字的映射），也就是大小写英文字母，数字和一些符号。ASCII 码采用 8 位 bit 进行编码，也就是一个字节，能表示的最大整数就是 255。当处理中文时，255个字符，显然就不够了。</p>\n<h4 id=\"1-3-中文编码\"><a href=\"#1-3-中文编码\" class=\"headerlink\" title=\"1.3 中文编码\"></a>1.3 中文编码</h4><p>要处理中文，一个字节显然是不够的（中文字符数量可远远不止 255 个）。所以，中国制定了 <code>GB2312</code> 编码，使用两个字节来编码中文。两个字节能够表示 65535 个整数，基本上能够囊括所有的汉字了。让我们来看一下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(<span class=\"string\">'中'</span>.encode(<span class=\"string\">'gb2312'</span>))</span><br><span class=\"line\">[<span class=\"number\">214</span>,<span class=\"number\">208</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(<span class=\"string\">'a'</span>.encode(<span class=\"string\">'gb2312'</span>))</span><br><span class=\"line\">[<span class=\"number\">97</span>]</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，<code>GB2312</code> 编码方式不仅可以将中文进行编码，同时兼容 <code>ASCII</code> 码，使用两者对 <code>ASCII</code> 的 127 个字符进行编码得到的结果是相同的。即</p>\n<blockquote>\n<p>‘中’ -&gt; 11010110 11010000<br>‘a’ -&gt; 00000000 01100001</p>\n</blockquote>\n<p>我们常见的 <code>gbk</code> 编码方式，其实就是在 <code>gb2312</code> 编码的基础上，增加了一些中文字符。</p>\n<p>现在，使用 <code>GB2312</code> 编码方式，我们能处理中英文混杂的文本了。那么问题来了，如果一段文本既有中文，又有英文，还有其他语言呢？</p>\n<h4 id=\"1-4-大统一：unicode-编码\"><a href=\"#1-4-大统一：unicode-编码\" class=\"headerlink\" title=\"1.4 大统一：unicode 编码\"></a>1.4 大统一：unicode 编码</h4><p>为每种语言制定一套编码方式实在是太蠢了！为什么不能把所有语言的所有字符一起编码呢？</p>\n<p>把所有语言统一到一套编码里，这套编码就是 unicode 编码。使用 unicode 编码，无论处理什么文本都不会出现乱码问题了。</p>\n<p>unicode 编码使用两个字节（16 位 bit）表示一个字符，比较偏僻的字符需要使用 4 个字节。</p>\n<p>但是新的问题又来了，如果一段纯英文文本，用 <code>unicode</code> 编码存储会比用 <code>ASCII</code> 编码多占用一倍空间！无论是存储还是传输都很浪费！</p>\n<h4 id=\"1-5-节约小能手：utf-8-编码\"><a href=\"#1-5-节约小能手：utf-8-编码\" class=\"headerlink\" title=\"1.5 节约小能手：utf-8 编码\"></a>1.5 节约小能手：utf-8 编码</h4><p>为了改进上述问题，又提出了 <code>utf-8</code> 编码。该编码将一个 unicode 字符编码成 1~6 个字节，常用的英文字母被编码成 1 个字节，汉字通常是 3 个字节，只有很生僻的字符才会被编码成 4~6 个字节。注意，从 unicode 到 utf-8 并不是直接的对应，而是通过一些算法和规则来转换的。 </p>\n<p>来看一下具体编码例子吧：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(<span class=\"string\">'中'</span>.encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">[<span class=\"number\">228</span>, <span class=\"number\">184</span>, <span class=\"number\">173</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(<span class=\"string\">'a'</span>.encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">[<span class=\"number\">97</span>]</span><br></pre></td></tr></table></figure></p>\n<p>可以看出，<code>utf-8</code> 将汉字 ‘中’ 编码成了三个字节，将英文字母 ‘a’ 编码成了一个字节，且 <code>utf-8</code> 编码兼容 <code>ASCII</code> 编码。</p>\n<h3 id=\"2-Python编码\"><a href=\"#2-Python编码\" class=\"headerlink\" title=\"2. Python编码\"></a>2. Python编码</h3><h4 id=\"2-1-Python2-or-Python3\"><a href=\"#2-1-Python2-or-Python3\" class=\"headerlink\" title=\"2.1 Python2 or Python3 ?\"></a>2.1 Python2 or Python3 ?</h4><p>从上面的知识，我们可以知道，字符的最佳定义应当是 Unicode 字符（存储及传输的时候再转为 utf-8）。</p>\n<p>从 Python3 的 str 对象中获取的元素是 Unicode 字符，这相当于从 Python2 的 unicode 对象中获取的元素。而 Python2 的 str 对象获取的是原始字节序列（相信用过 Python2 的都见过 ‘\\xe8\\x32\\xa6\\xb2……’ 这种乱七八糟的字符吧）。</p>\n<p>所以，我们的结论是：</p>\n<blockquote>\n<p>人生苦短，我用Python3</p>\n</blockquote>\n<h4 id=\"2-2-一个例子\"><a href=\"#2-2-一个例子\" class=\"headerlink\" title=\"2.2 一个例子\"></a>2.2 一个例子</h4><p>让我们来结合Python实例来具体看一下编码的应用：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Python3 字符串，为 Unicode 字符</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'中文'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"comment\"># 查看当前系统默认编码方式（linux）， windows 默认为utf-8</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.getfilesystemencoding()</span><br><span class=\"line\"><span class=\"string\">'utf-8'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">with</span> open(<span class=\"string\">'test.txt'</span>, <span class=\"string\">'w'</span>, encoding = <span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">···     f.write(a)</span><br><span class=\"line\">···</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">with</span> open(<span class=\"string\">'/home/zhuyuhe/test.txt'</span>, <span class=\"string\">'r'</span>，encoding = <span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(f.readlines())</span><br><span class=\"line\">...</span><br><span class=\"line\">[<span class=\"string\">'中文'</span>]</span><br></pre></td></tr></table></figure></p>\n<p>上面两个 open 发生了什么的，让我们看一下：</p>\n<p>对于第一个 open 函数，它的执行流程是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[str对象获取 unicode 字符] --&gt;|utf-8 编码| --&gt; [字节序列] --&gt;|二进制形式存储| --&gt; [test.txt]</span><br></pre></td></tr></table></figure></p>\n<p>对于第二个 open 函数，它的执行流程是这样的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[文件中存放的0101...] --&gt;|utf-8 解码| --&gt; [unicode 字符] --&gt; [str 对象]</span><br></pre></td></tr></table></figure></p>\n<p>这里可能会有一点疑问，为什么 unicode 字符可以通过 utf-8 编码成二进制数字，二进制数字通过 utf-8 解码成 unicode 字符。</p>\n<p>前面已经说过，utf-8 是在 unicode 的基础上改进而来，是针对传输和存储而设计的一种编码方式。 utf-8 编码针对的对象是 unicode 字符。</p>\n<p>也就是说，在计算机内存中，统一使用 unicode 编码，当需要保存到硬盘或者需要传输的时候，就转换为 utf-8 编码。</p>\n<h4 id=\"2-3-另一个例子\"><a href=\"#2-3-另一个例子\" class=\"headerlink\" title=\"2.3 另一个例子\"></a>2.3 另一个例子</h4><p>如果我们使用记事本打开上一小节保存的 <code>test.txt</code> 呢，这中间发生了什么呢？</p>\n<p>让我们同样用流程图来看一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[在计算机硬盘以0101...形式存放的文件] --&gt; |记事本所使用的编码方式|--&gt; B[我们看到的字符]</span><br></pre></td></tr></table></figure>\n<p>我们的 <code>test.txt</code> 是以 utf-8 的编码方式保存的，如果记事本使用的编码方式为 <code>gb2312</code>，打开该文件时，记事本会尝试以 <code>gb2312</code> 的方式解码该文件的字节序列（二进制数字），由于两者的字符与字节对应关系不同，当然会解码失败。此时记事本会显示各种乱码。这个过程类似下面的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'中文'</span>.encode(<span class=\"string\">'utf-8'</span>).decode(<span class=\"string\">'gbk'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">UnicodeDecodeError: <span class=\"string\">'gbk'</span> codec can<span class=\"string\">'t decode byte 0xad in position 2: illegal multibyte sequence</span></span><br></pre></td></tr></table></figure>\n<p>如果碰到上述问题，可以尝试使用 <a href=\"https://notepad-plus-plus.org/\" target=\"_blank\" rel=\"noopener\">notepad++</a> 打开该文件，尝试改变编辑器的编码方式，来尝试是否能正常打开文件。</p>\n<p>是的，只能去尝试。因为在没有任何信息的情况下，给我们一串字节序列，我们是不知道它的编码方式的。</p>\n<p>所以，在平时的文件存储和传输中，统一编码方式是很重要的。</p>\n<h4 id=\"2-4-统一编码\"><a href=\"#2-4-统一编码\" class=\"headerlink\" title=\"2.4 统一编码\"></a>2.4 统一编码</h4><p>在日常的使用中，避免乱码的重要方式就是统一你的编码方式。</p>\n<p>一般我们将编码方式统一为 utf-8，下面给出了一些参考的建议：</p>\n<ol>\n<li><p>linux 使用 Python 时，可以使用如下代码查看默认编码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sys.getfilesystemencoding()</span><br></pre></td></tr></table></figure>\n<p>查看是否为 utf-8，如果不是，改成 utf-8。</p>\n</li>\n<li>windows 默认编码方式为 utf-8，不需要修改</li>\n<li>在使用 open 函数及其他读写函数时，加上 <code>encoding=utf-8</code>，确保文件以 utf-8 方式编码和解码。</li>\n<li>使用远程连接软件时，比如 XShell 或 MobaXterm ，将软件的编码选为 utf-8，这样可以保证远程连接显示正常。</li>\n<li>不要依赖系统的默认编码，打开文件时应始终明确传入 encoding = 参数，因为不同设备使用的默认编码不同，即使是同一设备，也可能会发生变化。</li>\n</ol>\n<p>其实，理解了为何需要做上述处理，也基本就理解了编码。碰到编码问题，结合错误信息，基本上就能很快找出发生错误的原因了。不过为了方便起见，我还是将常见的问题总结了下。</p>\n<h3 id=\"3-常见问题原因及解决方案\"><a href=\"#3-常见问题原因及解决方案\" class=\"headerlink\" title=\"3. 常见问题原因及解决方案\"></a>3. 常见问题原因及解决方案</h3><h4 id=\"3-1-UnicodeEncodeError\"><a href=\"#3-1-UnicodeEncodeError\" class=\"headerlink\" title=\"3.1 UnicodeEncodeError\"></a>3.1 UnicodeEncodeError</h4><p>多数非 UTF 编码器只能处理 Unicode 字符的一小部分子集。把文本转换为字节序列时，如果目标编码中没有定义某个字符，就会抛出 UnicodeEncodeError 异常。</p>\n<p>看个例子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'中文'</span>.encode(<span class=\"string\">'ascii'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">UnicodeEncodeError: <span class=\"string\">'ascii'</span> codec can<span class=\"string\">'t encode characters in position 0-1: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure></p>\n<p>当我们尝试将中文字符以 ASCII 方式编码时，报出了 UnicodeEncodeError。这个原因很明显，ASCII 编码方式并没有定义中文字符，无法对中文字符进行编码。</p>\n<p>碰到这种问题，可以使用 errors 参数进行处理：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'中文'</span>.encode(<span class=\"string\">'ascii'</span>, errors=<span class=\"string\">'ignore'</span>)</span><br><span class=\"line\"><span class=\"string\">b''</span></span><br></pre></td></tr></table></figure></p>\n<p>我们将错误的编码忽略掉，最后得到空的字节序列。通常，这样做是非常不妥的。</p>\n<p>errors 参数还有许多可选项，大家可以自行探索。</p>\n<p>比较妥当的解决方案，当然是选择合适的编码方式。这个需要根据具体情况而定，相信，理解了这个错误发生的原因，解决起来就很轻松啦！</p>\n<h4 id=\"3-2-UnicodeDecodeError\"><a href=\"#3-2-UnicodeDecodeError\" class=\"headerlink\" title=\"3.2 UnicodeDecodeError\"></a>3.2 UnicodeDecodeError</h4><p>不是每一个字节都包含有有效的 ASCII 字符，也不是每一个字符序列都是有效的 utf-8 。因此把二进制序列转换为文本时，遇到无法转换的字节序列就会抛出 UnicodeDecodeError。</p>\n<p>看个例子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = <span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b.decode(<span class=\"string\">'ascii'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">UnicodeDecodeError: <span class=\"string\">'ascii'</span> codec can<span class=\"string\">'t decode byte 0xe4 in position 0: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure></p>\n<p>b 是字符 ‘中文’ 以 utf-8 方式编码形成的字节序列，属于 Python3 中的 bytes 类型。将该字节序列以 ASCII 方式解码时抛出了 UnicodeDecodeError。</p>\n<h3 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4 总结\"></a>4 总结</h3><p>本文详细阐述了编码的原理及各种问题发生的原因，相信搞懂这些，以后碰到编码问题就再也不用求助 Google 了。知道了问题发生的原因，我们自己就能迅速解决了！</p>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><p><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000\" target=\"_blank\" rel=\"noopener\">廖雪峰的官方网站-字符串和编码</a><br><a href=\"http://www.10tiao.com/html/506/201803/2651615541/1.html\" target=\"_blank\" rel=\"noopener\">大道至简：史上最易懂的『乱码』解决方案</a><br>《流畅的Python》</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjqw6heif0000gsujh5s8to23","tag_id":"cjqw6heip0002gsujy9rv9e9k","_id":"cjqw6heiv0006gsujko5590vb"},{"post_id":"cjqw6heil0001gsuj2m9e2hn5","tag_id":"cjqw6heiu0005gsuj5gf4zxcu","_id":"cjqw6heiy0008gsujopqeremb"},{"post_id":"cjqw6heiq0003gsujl1ktyr2g","tag_id":"cjqw6heiu0005gsuj5gf4zxcu","_id":"cjqw6heiz000agsujizwwtju6"},{"post_id":"cjqw6heis0004gsujypfk4dhk","tag_id":"cjqw6heiz0009gsujvy5l5dcf","_id":"cjqw6hej0000bgsuj5p0e09vu"}],"Tag":[{"name":"求职","_id":"cjqw6heip0002gsujy9rv9e9k"},{"name":"ML","_id":"cjqw6heiu0005gsuj5gf4zxcu"},{"name":"编程语言 编码","_id":"cjqw6heiz0009gsujvy5l5dcf"}]}}